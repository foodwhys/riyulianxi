多表查询
------------
多表查询：查询时从多张表中获取所需数据
单表查询的SQL语句：select 字段列表 from 表名;
那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select 字段列表 from 
表1, 表2;

查询用户表和部门表中的数据
------------
select * from tb_emp , tb_dept;

分类
------------

------------
连接查询
------------

内连接
------------
相当于查询A、B交集部分数据

外连接
------------
左外连接：查询左表所有数据(包括两张表交集部分数据)
右外连接：查询右表所有数据(包括两张表交集部分数据)

内连接
------------
内连接查询：查询两表或多表中交集部分数据。
内连接从语法上可以分为：
隐式内连接
显式内连接

------------
隐式内连接语法：
select 字段列表 from 表1 , 表2 where 条件 ... ;

显式内连接语法
------------
select 字段列表 from 表1 [ inner ] join 表2 on 连接条件 ... ;

案例：查询员工的姓名及所属的部门名称

隐式内连接实现
select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据
from tb_emp , tb_dept -- 关联两张表
where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积

显式内连接实现
select tb_emp.name , tb_dept.name
from tb_emp inner join tb_dept
on tb_emp.dept_id = tb_dept.id;

左外连接语法结构
------------
select 字段列表 from 表1 left [ outer ] join 表2 on 连接条件... ;

右外连接语法结构
------------
select 字段列表 from 表1 right [ outer ] join 表2 on 连接条件... ;

右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。


案例：查询员工表中所有员工的姓名, 和对应的部门名称
-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表
匹配的右边表中的数据
select emp.name , dept.name
from tb_emp AS emp left join tb_dept AS dept
on emp.dept_id = dept.id;

子查询
------------
SQL语句中嵌套select语句，称为嵌套查询，又称子查询。

SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2... );

子查询外部的语句可以是insert / update / delete / select 的任何一个，最常见的是 select。

根据子查询结果的不同分为：
1. 标量子查询（子查询结果为单个值[一行一列]）
2. 列子查询（子查询结果为一列，但可以是多行）
3. 行子查询（子查询结果为一行，但可以是多列）
4. 表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）

子查询可以书写的位置：
1. where之后
2. from之后
3. select之后

标量子查询
------------
子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。
常用的操作符： = <> > >= < <= 

案例1：查询"教研部"的所有员工信息
------------
可以将需求分解为两步：
1. 查询 "教研部" 部门ID
2. 根据 "教研部" 部门ID，查询员工信息

-- 1.查询"教研部"部门ID
select id from tb_dept where name = '教研部'; #查询结果：2
-- 2.根据"教研部"部门ID, 查询员工信息
select * from tb_emp where dept_id = 2;
-- 合并出上两条SQL语句
select * from tb_emp where dept_id = (select id from tb_dept where name = '教研部');

案例2：查询在 "方东白" 入职之后的员工信息
------------
可以将需求分解为两步：
1. 查询 方东白 的入职日期
2. 查询 指定入职日期之后入职的员工信息
-- 1.查询"方东白"的入职日期
select entrydate from tb_emp where name = '方东白'; #查询结果：
2012-11-01
-- 2.查询指定入职日期之后入职的员工信息
select * from tb_emp where entrydate > '2012-11-01';
-- 合并以上两条SQL语句
select * from tb_emp where entrydate > (select entrydate from tb_emp
where name = '方东白');

列子查询
------------
子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。
常用的操作符

IN 在指定的集合范围之内，多选一
NOT IN 不在指定的集合范围之内


案例：查询"教研部"和"咨询部"的所有员工信息
分解为以下两步：
1. 查询 "销售部" 和 "市场部" 的部门ID
2. 根据部门ID, 查询员工信息

-- 1.查询"销售部"和"市场部"的部门ID
select id from tb_dept where name = '教研部' or name = '咨询部'; #查
询结果：3,2
-- 2.根据部门ID, 查询员工信息
select * from tb_emp where dept_id in (3,2);
-- 合并以上两条SQL语句
select * from tb_emp where dept_id in (select id from tb_dept where
name = '教研部' or name = '咨询部');

行子查询
------------
可以拆解为两步进行：
1. 查询 "韦一笑" 的入职日期 及 职位
2. 查询与"韦一笑"的入职日期及职位相同的员工信息

-- 查询"韦一笑"的入职日期 及 职位
select entrydate , job from tb_emp where name = '韦一笑'; #查询结果：
2007-01-01 , 2
-- 查询与"韦一笑"的入职日期及职位相同的员工信息
select * from tb_emp where (entrydate,job) = ('2007-01-01',2);
-- 合并以上两条SQL语句
select * from tb_emp where (entrydate,job) = (select entrydate , job
from tb_emp where name = '韦一笑');

表子查询
------------
子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。


案例：查询入职日期是 "2006-01-01" 之后的员工信息 , 及其部门信息
------------
分解为两步执行：
1. 查询入职日期是 "2006-01-01" 之后的员工信息
2. 基于查询到的员工信息，在查询对应的部门信息

select * from emp where entrydate > '2006-01-01';
select e.*, d.* from (select * from emp where entrydate > '2006-01-
01') e left join dept d on e.dept_id = d.id ;

事务
------------
MYSQL中有两种方式进行事务的操作：
1. 自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）
2. 手动提交事务：先开启，再提交


start transaction; / begin ; 开启手动控制事务
commit; 提交事务
rollback; 回滚事务

四大特性
------------
原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。
一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。
隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。
持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。

索引
------------
索引(index)：是帮助数据库高效获取数据的数据结构 。
简单来讲，就是使用索引可以提高查询的效率。

优点：
1. 提高数据查询的效率，降低数据库的IO成本。
2. 通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。
缺点：
1. 索引会占用存储空间。
2. 索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。

创建索引
------------
create [ unique ] index 索引名 on 表名 (字段名,... ) ;

查看索引
------------
show index from 表名;

案例：查询 tb_emp 表的索引信息
show index from tb_emp;

删除索引
------------
drop index 索引名 on 表名;

案例：删除 tb_emp 表中name字段的索引
drop index idx_emp_name on tb_emp;

