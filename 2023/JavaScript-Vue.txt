1.2 引入方式

JS引入方式
---------------
	内部脚本：将JS代码定义在html页面的<script></script>中
		建议：将<script></script>放在<body>的底部
	外部脚本：将JS代码定义在js文件中，通过<script></script>标签引入
		注意：通过<script>标签引入外部js文件时，标签不可以自闭合

---------------
JS基础语法
---------------

书写语法
---------------
区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的
每行结尾的分号可有可无

注释
---------------
单行注释：// 注释内容
多行注释：/* 注释内容 */
大括号表示代码块

代码块
---------------
大括号表示代码块
//判断
if(count == 3){
    alert(count);
}

输出语句
---------------
window.alert("Hello JavaScript"); //浏览器弹出警告框
document.write("Hello JavaScript"); //写入HTML,在浏览器展示
console.log("Hello JavaScript"); //写入浏览器控制台

变量
---------------
JavaScript 中用 var 关键字（variable 的缩写）来声明变量 。
JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。
变量名需要遵循如下规则：
	组成字符可以是任何字母、数字、下划线（_）或美元符号（$）
	数字不能开头
	建议使用驼峰命名

声明：
	var：声明变量，全局作用域/函数作用域，允许重复声明
	let：声明变量，块级作用域，不允许重复声明
	const：声明常量，一旦声明，常量的值不能改变

数据类型
---------------
JavaScript中分为：原始类型 和 引用类型。

原始类型
---------------
 number：数字（整数、小数、NaN(Not a Number)）
 string：字符串，单双引皆可
 boolean：布尔。true，false
 null：对象为空
 undefined：当声明的变量未初始化时，该变量的默认值是 undefined

引用类型
---------------

使用 typeof 运算符可以获取数据类型
---------------
var a = 20;
alert(typeof  a);

运算符
---------------
 算术运算符：+ , - , * , / , % , ++ , --
 赋值运算符：= , += , -= , *= , /= , %=
 比较运算符：> , < , >= , <= , != , == , === 
 逻辑运算符：&& , || , !
 三元运算符：条件表达式 ? true_value: false_value

== 会进行类型转换，=== 不会进行类型转换

字符串类型转为数字：
---------------
	将字符串字面值转为数字。 如果字面值不是数字，则转为NaN。

其他类型转为boolean：
---------------
Number：0 和 NaN为false，其他均转为true。
String：空字符串为false，其他均转为true。
Null 和 undefined ：均转为false。

---------------
介绍：函数（方法）是被设计为执行特定任务的代码块。
---------------

定义：JavaScript 函数通过 function 关键字进行定义，语法为：
第一种定义格式
---------------
function functionName(参数1,参数2..){  
		//要执行的代码
}


注意：
形式参数不需要类型。因为JavaScript是弱类型语言
返回值也不需要定义类型，可以在函数内部直接使用return返回即可

调用：函数名称(实际参数列表)

定义方式二：
---------------
var functionName = function (参数1,参数2..){   
	//要执行的代码
}

---------------
JavaScript对象
---------------

可以大体分页3大类：
---------------

第一类：
---------------
基本对象,我们主要学习Array和JSON和String

Array对象用于定义数组。
---------------
 方式一：
 var 变量名 = new Array(元素列表); 
 
 方式二：
 var 变量名 = [ 元素列表 ]; 
 访问：
 arr[ 索引 ] = 值; 



String对象的创建方式有2种
---------------
 方式1：
 var 变量名 = new String("…") ; 
 方式2：
 var 变量名 = "…" ; //方式二
 
 属性和方法
 length字符串的长度。
 
 charAt()返回在指定位置的字符。
 indexOf()检索字符串。
 trim()去除字符串两边的空格
 substring()提取字符串中两个指定的索引号之间的字符。

JSON对象
---------------
key必须使用引号并且是双引号标记，value可以是任意数据类型。
{
    "key":value,
    "key":value,
    "key":value
}


JavaScript 中自定义对象特别简单，其语法格式如下：
---------------
var 对象名 = {
    属性名1: 属性值1, 
    属性名2: 属性值2,
    属性名3: 属性值3,
    函数名称: function(形参列表){}
};




第二类：
BOM对象,主要是和浏览器相关的几个对象
---------------
Window 浏览器窗口对象
Navigator 浏览器对象
Screen 屏幕对象
History 历史记录对象
Locationd 地址栏对象

我们重点学习
---------------
Window对象
Location对象 

直接使用window，其中 window. 可以省略
---------------
window.alert("Hello Window");
alert("Hello Window");

第三类：DOM
---------------
Document：整个文档对象
Element：元素对象
Attribute：属性对象
Text：文本对象
Comment：注释对象



document.getElementById()
根据id属性值获取，返回单个Element对象

document.getElementsByTagName()
根据标签名称获取，返回Element对象数组

document.getElementsByName()
根据name属性值获取，返回Element对象数组

document.getElementsByClassName()
根据class属性值获取，返回Element对象数组

---------------
JavaScript事件
---------------


事件绑定 
---------------
方式1：通过html标签中的事件属性进行绑定

例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。

在VS Code中创建名为09. JS-事件-事件绑定.html，添加如下代码：
<input type="button" id="btn1" value="事件绑定1" onclick="on()">

方式2：通过DOM中Element元素的事件属性进行绑定

依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，
所以我们也可以通过element对象的属性来操作标签的属性。
此时我们再次添加一个按钮，代码如下：
<input type="button" id="btn2" value="事件绑定2">

document.getElementById('btn2').onclick = function(){
    alert("按钮2被点击了...");
}


常见事件
---------------
onclick 鼠标单击事件
onblur 元素失去焦点
onfocus 元素获得焦点
onload 某个页面或图像被完成加载
onsubmit 当表单提交时触发该事件
onmouseover 鼠标被移到某元素之上
onmouseout 鼠标从某元素移开