基类
------------------------------------
Object
Component 组件
Container 容器


Container 三个继承的类
------------------------------------
Window 窗口容器
panel 内嵌容器
ScrollPane 含有滚动条容器


Window 窗口常见继承类
------------------------------------
Frame 创建窗口
Diaglog 创建对话框

Component作为基类常见API
------------------------------------
setLocation 设置组件的位置
setSize 设置组件的大小
setBounds 同时设置组件的位置、大小
setVisible 设置该组件的可见性

Container作为容器根类，提供了如下方法来访问容器中的组件
------------------------------------
add 向容器中添加其他组件 (该组件既可以是普通组件，也可以 是容器) ， 并返回被添加的组件
getComponentAt 返回指定点的组件
getComponentCoun 返回该容器内组件的数量
getComponents 返回该容器内的所有组件

常用API
------------------------------------
setLayout 设置式样
// 设置窗口位置和大小
jf.setBounds(400,400,400,400);

// 固定窗口大小
jf.setResizable(false);

------------------------------------
LayoutManager布局管理器
------------------------------------

FlowLayout
------------------------------------
FlowLayout(int align) 指定垂直间距、水平间距
FlowLayout(int align,int hgap,int vgap) 指定对齐方式及指定的垂直问距、水平间距创建FlowLayout 布局管理器

FlowLayout 中组件的排列方向(从左向右、从右向左、从中间向两边等)
FlowLayout类的静态常量 : FlowLayout. LEFT 、 FlowLayout. CENTER 、 FlowLayout. RIGHT ，默认是左对齐

BorderLayout
------------------------------------
将容器分为 EAST 、 SOUTH 、 WEST 、 NORTH 、 CENTER五个区域

1.当向使用 BorderLayout 布局管理器的容器中添加组件时默认添加到中间区域中；
2.如果向同一个区域中添加多个组件时 ， 后放入的组件会覆盖先放入的组件；

BorderLayout(int hgap,int vgap): 使用指定的水平间距、垂直间距创建

GridLayout
------------------------------------
GridLayout 采用指定 的行数、列 数 ，以及指定的横向间距 、 纵向间距将容器分割成多个网格

gridx 设置受该对象控制的GUI组件左上角所在网格的横向索引
gridy 设置受该对象控制的GUI组件左上角所在网格的纵向索引


BoxLayout
------------------------------------
BoxLayout.X_AXIS( 横向)和 BoxLayout.Y _AXIS (纵向〉两个方向

AWT中常用组件
------------------------------------
| 组件名        | 功能                                                                                                   |
| ------------- | ---------------------------------------------------------------------------------------------------- |
| Button        | Button                                                                                               |
| Canvas        | 用于绘图的画布                                                                                              |
| Checkbox      | 复选框组件（也可当做单选框组件使用）                                                                                   |
| CheckboxGroup | 用于将多个Checkbox 组件组合成一组， 一组 Checkbox 组件将只有一个可以 被选中 ， 即全部变成单选框组件                                        |
| Choice        | 下拉选择框                                                                                                |
| Frame         | 窗口 ， 在 GUI 程序里通过该类创建窗口                                                                               |
| Label         | 标签类，用于放置提示性文本                                                                                        |
| List          | JU表框组件，可以添加多项条目                                                                                      |
| Panel         | 不能单独存在基本容器类，必须放到其他容器中                                                                                |
| Scrollbar     | 滑动条组件。如果需要用户输入位于某个范围的值 ， 就可以使用滑动条组件 ，比如调 色板中设置 RGB 的三个值所用的滑动条。当创建一个滑动条时，必须指定它的方向、初始值、 滑块的大小、最小值和最大值。 |
| ScrollPane    | 带水平及垂直滚动条的容器组件                                                                                       |
| TextArea      | 多行文本域                                                                                                |
| TextField     | 单行文本框                                                                                                |


对话框Dialog
------------------------------------
owner:当前对话框的父窗口
title:当前对话框的标题
modal：当前对话框是否是模式对话框，true/false

FileDialog
------------------------------------
Dialog 类还有 一个子类
FileDialog依赖于运行平台的实现，无法指定模态或者非模态，跟平台走
parent:指定父窗口
title:对话框标题
mode:文件对话框类型，如果指定为FileDialog.load，用于打开文件，如果指定为FileDialog.SAVE,用于保存文件、

getDirectory() 获取被打开或保存文件的绝对路径
getFile() 获取被打开或保存文件的文件名

事件处理
------------------------------------
4个重要的概念需要理解：
1.事件源(Event Source)：操作发生的场所，通常指某个组件，例如按钮、窗口等；
2.事件（Event）：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。
3.事件监听器(Event Listener):当在某个事件源上发生了某个事件，事件监听器就可以对这个事件进行处理。
4.注册监听：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生了事件B之后，那么事件监听器A的代码就会自动执行
事件监听器(A)
事件(B)
事件源(C)

事件
AWT把事件分为了两大类：
------------------------------------
1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、拖放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。
| 事件           | 触发时机                                                                              |
| -------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| ComponentEvent | 组件事件 ， 当 组件尺寸发生变化、位置发生移动、显示/隐藏状态发生改变时触发该事件。                                                      |
| ContainerEvent | 容器事件 ， 当容器里发生添加组件、删除组件时触发该事件 。                                                                               |
| WindowEvent    | 窗口事件， 当窗 口状态发生改变 ( 如打开、关闭、最大化、最 小化)时触发该事件 。                                                          |
| FocusEvent     | 焦点事件 ， 当组件得到焦点或失去焦点 时触发该事件 。                                                                                    |
| KeyEvent       | 键盘事件 ， 当按键被按下、松开、单击时触发该事件。                                                                                      |
| MouseEvent     | 鼠标事件，当进行单击、按下、松开、移动鼠标等动作 时触发该事件。                                                                         |
| PaintEvent     | 组件绘制事件 ， 该事件是一个特殊的事件类型 ， 当 GUI 组件调 用 update/paint 方法 来呈现自身时触发该事件，该事件并非专用于事件处理模型 。|

2.高级事件：这类事件并不会基于某个特定动作，而是根据功能含义定义的事件。
| 事件           | 触发时机                                                          |
| -------------- | ------------------------------------------------------------------|
| ActionEvent    | 动作事件 ，当按钮、菜单项被单击，在 TextField 中按 Enter 键时触发 |
| AjustmentEvent | 调节事件，在滑动条上移动滑块以调节数值时触发该事件。              |
| ltemEvent      | 选项事件，当用户选中某项， 或取消选中某项时触发该事件 。          |
| TextEvent      | 文本事件， 当文本框、文本域里的文本发生改变时触发该事件。         |

监听器
------------------------------------
1.不同的事件需要使用不同的监听器监听，
2.不同的监听器需要实现不同的监听器接口， 
3.当指定事件发生后,事件监听器就会调用所包含的事件处理器(实例方法)来处理事件。

| 事件类别        | 描述信息                 | 监听器接口名        |
| --------------- | ------------------------ | ------------------- |
| ActionEvent     | 激活组件                 | ActionListener      |
| ItemEvent       | 选择了某些项目           | ItemListener        |
| MouseEvent      | 鼠标移动                 | MouseMotionListener |
| MouseEvent      | 鼠标点击等               | MouseListener       |
| KeyEvent        | 键盘输入                 | KeyListener         |
| FocusEvent      | 组件收到或失去焦点       | FocusListener       |
| AdjustmentEvent | 移动了滚动条等组件       | AdjustmentListener  |
| ComponentEvent  | 对象移动缩放显示隐藏等   | ComponentListener   |
| WindowEvent     | 窗口收到窗口级事件       | WindowListener      |
| ContainerEvent  | 容器中增加删除了组件     | ContainerListener   |
| TextEvent       | 文本字段或文本区发生改变 | TextListener        |


菜单组件
------------------------------------
| 菜单组件名称     | 功能                                                                      |
| ---------------- | ------------------------------------------------------------------------- |
| MenuBar          | 菜单条 ， 菜单的容器 。                                                   |
| Menu             | 菜单组件 ， 菜单项的容器 。 它也是Menultem的子类 ，所以可作为菜单项使用   |
| PopupMenu        | 上下文菜单组件(右键菜单组件)                                              |
| Menultem         | 菜单项组件 。                                                             |
| CheckboxMenuItem | 复选框菜单项组件                                                          |


Swing
------------------------------------
Swing 组件采用 MVC(Model-View-Controller， 即模型一视图一控制器)设计模式：


模型(Model): 用于维护组件的各种状态；
视图(View): 是组件的可视化表现；
控制器(Controller):用于控制对于各种事件、组件做出响应 。

当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。
Swing使用UI代理来包装视图和控制器， 还有一个模型对象来维护该组件的状态。
例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象 。 
Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。
   
Swing组件层次
------------------------------------
大部分Swing 组件都是 JComponent抽象类的直接或间接子类(并不是全部的 Swing 组件)
JComponent 类定义了所有子类组件的通用方法
JComponent 类是 AWT 里 java.awt. Container 类的子类
绝大部分 Swing 组件类继承了 Container类，所以Swing 组件都可作为 容器使用 ( JFrame继承了Frame 类)。

Swing组件和AWT组件的对应关系：
大部分情况下，只需要在AWT组件的名称前面加个J，就可以得到其对应的Swing组件名称，但有几个例外：
1. JComboBox: 对应于 AWT 里的 Choice 组件，但比 Choice 组件功能更丰富 。
2. JFileChooser: 对应于 AWT 里的 FileDialog 组件 。
3. JScrollBar: 对应于 AWT 里的 Scrollbar 组件，注意两个组件类名中 b 字母的大小写差别。
4. JCheckBox : 对应于 AWT 里的 Checkbox 组件， 注意两个组件类名中 b 字母的大小 写差别 。
5. JCheckBoxMenultem: 对应于 AWT 里的 CheckboxMenuItem 组件，注意两个组件类名中 b字母的大小写差别。

Swing组件按照功能来分类：
------------------------------------
​1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。
2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。
3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。
4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。
5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。
6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。
7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。

Swing 组件具有如下 4 个额外的功能 :
------------------------------------
1.可以为 Swing 组件设置提示信息。使用 setToolTipText()方法，为组件设置对用户有帮助的提示信息 。
  
2.很多 Swing 组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在 Swing 组件中使用图标， Swing为Icon 接口提供了 一个实现类: Imagelcon ，该实现类代表一个图像图标。
  
3.支持插拔式的外观风格。每个 JComponent 对象都有一个相应的 ComponentUI 对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。 ComponentUI 对象依赖当前使用的 PLAF ， 使用 UIManager.setLookAndFeel()方法可以改变图形界面的外观风格 。
  
4.支持设置边框。Swing 组件可以设置一个或多个边框。 Swing 中提供了各式各样的边框供用户边用，也能建立组合边框或自己设计边框。 一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。



------------------------------------
1.Swing菜单项指定快捷键时必须通过`组件名.setAccelerator(keyStroke.getKeyStroke("大写字母",InputEvent.CTRL_MASK))`方法来设置，其中KeyStroke代表一次击键动作，可以直接通过按键对应字母来指定该击键动作 。

2.更新JFrame的风格时，调用了` SwingUtilities.updateComponentTreeUI(f.getContentPane());`这是因为如果直接更新 JFrame 本身 ，将会导致 JFrame 也被更新， JFrame 是一个特殊的容器 ， JFrame 依然部分依赖于本地平台的图形组件 。如果强制 JFrame 更新，则有可能导致该窗口失去标题栏和边框 。

3.给组件设置右键菜单，不需要使用监听器，只需要调用setComponentPopupMenu()方法即可，更简单。

4.关闭JFrame窗口，也无需监听器，只需要调用setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)方法即可，更简单。

5.如果需要让某个组件支持滚动条，只需要把该组件放入到JScrollPane中，然后使用JScrollPane即可。

为组件设置边框
------------------------------------
特殊的Border
1. TitledBorder:它的作用并不是直接为其他组件添加边框，而是为其他边框设置标题，创建该类的对象时，需要传入一个其他的Border对象；
2. ComoundBorder:用来组合其他两个边框，创建该类的对象时，需要传入其他两个Border对象，一个作为内边框，一个座位外边框

给组件设置边框步骤：
1. 使用BorderFactory或者XxxBorder创建Border的实例对象；
2. 调用Swing组件的setBorder（Border b）方法为组件设置边框；

Swing组件按照功能来分类：

1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。
2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。
3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。
4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。
5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。
6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。
7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。

JToolBar  API:

| 方法名称                                 | 方法功能                                                     |
| ---------------------------------------- | ------------------------------------------------------------ |
| JToolBar( String name , int orientation) | 创建一个名字为name，方向为orientation的工具条对象，其orientation的是取值可以是SwingConstants.HORIZONTAL或SwingConstants.VERTICAL |
| JButton add(Action a)                    | 通过Action对象为JToolBar工具条添加对应的工具按钮             |
| addSeparator( Dimension size )           | 向工具条中添加指定大小的分隔符                               |
| setFloatable( boolean b )                | 设定工具条是否可以被拖动                                     |
| setMargin(Insets m)                      | 设置工具条与工具按钮的边距                                   |
| setOrientation( int o )                  | 设置工具条的方向                                             |
| setRollover(boolean rollover)            | 设置此工具条的rollover状态                                   |

Swing提供了JColorChooser和JFileChooser
这两种对话框，可以很方便的完成颜色的选择和本地文件的选择。

JOptionPane 可以非常方便地创建一些简单的对话框， 
Swing 已经为这些对话框添加了相应的组件，无须程序员手动添加组件 。

 JOptionPane 提供了如下 4 个方法来创建对话框 。
| 方法名称                                    | 方法功能                                                                                        |
| ------------------------------------------- | ------------------------------------------------------------------------------------------- |
| showMessageDialog/showInternalMessageDialog | 消息对话框 ，告知用户某事己发生 ， 用户只能单击"确定"按钮 ， 类似于 JavaScript 的 alert 函数 。                               |
| showConfirmDialog/showInternalConfirmDialog | 确认对话框，向用户确认某个问题，用户可以选择 yes 、 no ~ cancel 等选项 。 类似于 JavaScript 的 comfirm 函数 。该方法返回用户单击了 哪个按钮 |
| showInputDialog/showInternalInputDialog     | 输入对话框，提示要求输入某些信息，类似于 JavaScript的 prompt 函数。该方法返回用户输入的字符串 。                                  |
| showOptionDialog/showInternalOptionDialog   | 自定义选项对话框 ，允许使用自 定义选项 ，可以取代showConfirmDialog 所产生的对话框，只是用起来更复杂 。                              |

showXxxDialog(Component parentComponent,
        Object message, 
        String title, 
        int optionType, 
        int messageType,
            Icon icon,
        Object[] options, 
        Object initialValue)
--参数解释：
parentComponent：当前对话框的父组件
message：对话框上显示的信息，信息可以是字符串、组件、图片等
title：当前对话框的标题
optionType：当前对话框上显示的按钮类型：DEFAULT_OPTION、YES_NO_OPTION、YES_NO_CANCEL_OPTION、OK_CANCEL_OPTION
messageType:当前对话框的类型:ERROR_MESSAGE、INFORMATION_MESSAGE、WARNING_MESSAGE、QUESTION_MESSAGE、PLAIN_MESSAGE
icon:当前对话框左上角的图标
options:自定义下拉列表的选项
initialValue:自定义选项中的默认选中项

**当用户与对话框交互结束后，不同类型对话框的返回值如下：**

- showMessageDialog: 无返回值 。
- showlnputDialog: 返回用户输入或选择的字符串 。
- showConfirmDialog: 返回 一个整数代表用户选择的选项 。
- showOptionDialog : 返回 一个整数代表用户选择的选项，如果用户选择第一项，则返回 0; 如果选择第二项，则返回1……依此类推 。

**对 showConfirmDialog 所产生的对话框，有如下几个返回值：**

- YES OPTION: 用户 单击了 "是"按钮后返回 。
- NO OPTION: 用 户单击了"否"按钮后返回 。
- CANCEL OPTION: 用户单击了"取消"按钮后返回 。
- OK OPTION : 用户单击了"确定"按钮后返回 。
- CLOSED OPTION: 用户 单击了对话框右上角的 " x" 按钮后返回。

------------------------------------
JSplitPane
------------------------------------
JSplitPane 用于创建一个分割面板,它可以将 一个组件(通常是一个容器)分割成两个部分，
并提供一个分割条 ， 用户可以拖动该分割条来调整两个部分的大小。

通过如下构造方法可以创建JSplitPane对象
JSplitPane(int newOrientation, Component newLeftComponent,Component newRightComponent)

    newOrientation：指定JSplitPane容器的分割方向：
		如果值为JSplitPane.VERTICAL_SPLIT,为纵向分割；
		如果值为JSplitPane.HORIZONTAL_SPLIT，为横向分割；
    newLeftComponent：左侧或者上侧的组件；
    newRightComponent：右侧或者下侧的组件；


2. 设置是否开启连续布局的支持(可选)
------------------------------------
setContinuousLayout(boolean newContinuousLayout):
    默认是关闭的，如果设置为true，则打开连续布局的支持，但由于连续布局支持需要不断的重绘组件，所以效率会低一些


3. 设置是否支持"一触即展"的支持(可选)
------------------------------------
setOneTouchExpandable(boolean newValue):
    默认是关闭的，如果设置为true，则打开"一触即展"的支持


4. 其他设置
------------------------------------
setDividerLocation(double proportionalLocation):设置分隔条的位置为JSplitPane的某个百分比
setDividerLocation(int location)：通过像素值设置分隔条的位置
setDividerSize(int newSize)：通过像素值设置分隔条的大小
setLeftComponent(Component comp)/setTopComponent(Component comp)/setRightComponent(Component comp)/setBottomComponent(Component comp):
设置指定位置的组件

setPreferredSize(new Dimension(150,400));
------------------------------------
setPreferredSize()是Java Swing中的一个方法,用于设置组件的首选大小
Dimension 封装了一个构件的高度和宽度。

JTabledPane
------------------------------------
JTabbedPane可以很方便地在窗口上放置多个标签页，每个标签页相当于获得了一个与外部容器具有相同大小的组件摆放区域

1. 创建JTabbedPane对象
------------------------------------
 JTabbedPane(int tabPlacement, int tabLayoutPolicy):
    tabPlacement:
        指定标签标题的放置位置，可以选择 SwingConstants中的四个常量：TOP、LEFT、BOTTOM、RIGHT
    tabLaoutPolicy:
        指定当窗口不能容纳标签页标题时的布局策略，可以选择JTabbedPane.WRAP_TAB_LAYOUT和JTabbedPane.SCROLL_TAB_LAYOUT


2. 通过JTabbedPane对象堆标签进行增删改查
------------------------------------
addTab(String title, Icon icon, Component component, String tip):添加标签
    title:标签的名称
    icon:标签的图标
    component:标签对应的组件
    tip:光标放到标签上的提示

insertTab(String title, Icon icon, Component component, String tip, int index):插入标签页
    title:标签的名称
    icon:标签的图标
    component:标签对应的组件
    tip:光标放到标签上的提示
    index:在哪个索引处插入标签页
setComponentAt(int index, Component component):修改标签页对应的组件
    index:修改哪个索引处的标签
    component:标签对应的组件
removeTabAt(int index):
    index:删除哪个索引处的标签

3. 设置当前显示的标签页
------------------------------------
setSelectedIndex(int index):设置哪个索引处的标签被选中

4. 设置JTabbedPane的其他属性
------------------------------------
setDisabledIconAt(int index, Icon disabledIcon): 将指定位置的禁用图标设置为 icon，该图标也可以是null表示不使用禁用图标。
setEnabledAt(int index, boolean enabled): 设置指定位置的标签页是否启用。
setTitleAt(int index, String title): 设置指定位置标签页的标题为 title，该title可以是null,这表明设置该标签页的标题为空。
setToolTipTextAt(int index, String toolTipText): 设置指定位置标签页的提示文本 。

5. 为JTabbedPane设置监听器
------------------------------------
addChangeListener(ChangeListener l)
