基类
------------------------------------
Object
Component 组件
Container 容器


Container 三个继承的类
------------------------------------
Window 窗口容器
panel 内嵌容器
ScrollPane 含有滚动条容器


Window 窗口常见继承类
------------------------------------
Frame 创建窗口
Diaglog 创建对话框

Component作为基类常见API
------------------------------------
setLocation 设置组件的位置
setSize 设置组件的大小
setBounds 同时设置组件的位置、大小
setVisible 设置该组件的可见性

Container作为容器根类，提供了如下方法来访问容器中的组件
------------------------------------
add 向容器中添加其他组件 (该组件既可以是普通组件，也可以 是容器) ， 并返回被添加的组件
getComponentAt 返回指定点的组件
getComponentCoun 返回该容器内组件的数量
getComponents 返回该容器内的所有组件

常用API
------------------------------------
setLayout 设置式样
// 设置窗口位置和大小
jf.setBounds(400,400,400,400);

// 固定窗口大小
jf.setResizable(false);

------------------------------------
LayoutManager布局管理器
------------------------------------

FlowLayout
------------------------------------
FlowLayout(int align) 指定垂直间距、水平间距
FlowLayout(int align,int hgap,int vgap) 指定对齐方式及指定的垂直问距、水平间距创建FlowLayout 布局管理器

FlowLayout 中组件的排列方向(从左向右、从右向左、从中间向两边等)
FlowLayout类的静态常量 : FlowLayout. LEFT 、 FlowLayout. CENTER 、 FlowLayout. RIGHT ，默认是左对齐

BorderLayout
------------------------------------
将容器分为 EAST 、 SOUTH 、 WEST 、 NORTH 、 CENTER五个区域

1.当向使用 BorderLayout 布局管理器的容器中添加组件时默认添加到中间区域中；
2.如果向同一个区域中添加多个组件时 ， 后放入的组件会覆盖先放入的组件；

BorderLayout(int hgap,int vgap): 使用指定的水平间距、垂直间距创建

GridLayout
------------------------------------
GridLayout 采用指定 的行数、列 数 ，以及指定的横向间距 、 纵向间距将容器分割成多个网格

gridx 设置受该对象控制的GUI组件左上角所在网格的横向索引
gridy 设置受该对象控制的GUI组件左上角所在网格的纵向索引


BoxLayout
------------------------------------
BoxLayout.X_AXIS( 横向)和 BoxLayout.Y _AXIS (纵向〉两个方向

AWT中常用组件
------------------------------------
| 组件名        | 功能                                                                                                   |
| ------------- | ---------------------------------------------------------------------------------------------------- |
| Button        | Button                                                                                               |
| Canvas        | 用于绘图的画布                                                                                              |
| Checkbox      | 复选框组件（也可当做单选框组件使用）                                                                                   |
| CheckboxGroup | 用于将多个Checkbox 组件组合成一组， 一组 Checkbox 组件将只有一个可以 被选中 ， 即全部变成单选框组件                                        |
| Choice        | 下拉选择框                                                                                                |
| Frame         | 窗口 ， 在 GUI 程序里通过该类创建窗口                                                                               |
| Label         | 标签类，用于放置提示性文本                                                                                        |
| List          | JU表框组件，可以添加多项条目                                                                                      |
| Panel         | 不能单独存在基本容器类，必须放到其他容器中                                                                                |
| Scrollbar     | 滑动条组件。如果需要用户输入位于某个范围的值 ， 就可以使用滑动条组件 ，比如调 色板中设置 RGB 的三个值所用的滑动条。当创建一个滑动条时，必须指定它的方向、初始值、 滑块的大小、最小值和最大值。 |
| ScrollPane    | 带水平及垂直滚动条的容器组件                                                                                       |
| TextArea      | 多行文本域                                                                                                |
| TextField     | 单行文本框                                                                                                |


对话框Dialog
------------------------------------
owner:当前对话框的父窗口
title:当前对话框的标题
modal：当前对话框是否是模式对话框，true/false

FileDialog
------------------------------------
Dialog 类还有 一个子类
FileDialog依赖于运行平台的实现，无法指定模态或者非模态，跟平台走
parent:指定父窗口
title:对话框标题
mode:文件对话框类型，如果指定为FileDialog.load，用于打开文件，如果指定为FileDialog.SAVE,用于保存文件、

getDirectory() 获取被打开或保存文件的绝对路径
getFile() 获取被打开或保存文件的文件名

事件处理
------------------------------------
4个重要的概念需要理解：
1.事件源(Event Source)：操作发生的场所，通常指某个组件，例如按钮、窗口等；
2.事件（Event）：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。
3.事件监听器(Event Listener):当在某个事件源上发生了某个事件，事件监听器就可以对这个事件进行处理。
4.注册监听：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生了事件B之后，那么事件监听器A的代码就会自动执行
事件监听器(A)
事件(B)
事件源(C)

事件
AWT把事件分为了两大类：
------------------------------------
1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、拖放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。
| 事件           | 触发时机                                                                              |
| -------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
| ComponentEvent | 组件事件 ， 当 组件尺寸发生变化、位置发生移动、显示/隐藏状态发生改变时触发该事件。                                                      |
| ContainerEvent | 容器事件 ， 当容器里发生添加组件、删除组件时触发该事件 。                                                                               |
| WindowEvent    | 窗口事件， 当窗 口状态发生改变 ( 如打开、关闭、最大化、最 小化)时触发该事件 。                                                          |
| FocusEvent     | 焦点事件 ， 当组件得到焦点或失去焦点 时触发该事件 。                                                                                    |
| KeyEvent       | 键盘事件 ， 当按键被按下、松开、单击时触发该事件。                                                                                      |
| MouseEvent     | 鼠标事件，当进行单击、按下、松开、移动鼠标等动作 时触发该事件。                                                                         |
| PaintEvent     | 组件绘制事件 ， 该事件是一个特殊的事件类型 ， 当 GUI 组件调 用 update/paint 方法 来呈现自身时触发该事件，该事件并非专用于事件处理模型 。|

2.高级事件：这类事件并不会基于某个特定动作，而是根据功能含义定义的事件。
| 事件           | 触发时机                                                          |
| -------------- | ------------------------------------------------------------------|
| ActionEvent    | 动作事件 ，当按钮、菜单项被单击，在 TextField 中按 Enter 键时触发 |
| AjustmentEvent | 调节事件，在滑动条上移动滑块以调节数值时触发该事件。              |
| ltemEvent      | 选项事件，当用户选中某项， 或取消选中某项时触发该事件 。          |
| TextEvent      | 文本事件， 当文本框、文本域里的文本发生改变时触发该事件。         |

监听器
------------------------------------
1.不同的事件需要使用不同的监听器监听，
2.不同的监听器需要实现不同的监听器接口， 
3.当指定事件发生后,事件监听器就会调用所包含的事件处理器(实例方法)来处理事件。

| 事件类别        | 描述信息                 | 监听器接口名        |
| --------------- | ------------------------ | ------------------- |
| ActionEvent     | 激活组件                 | ActionListener      |
| ItemEvent       | 选择了某些项目           | ItemListener        |
| MouseEvent      | 鼠标移动                 | MouseMotionListener |
| MouseEvent      | 鼠标点击等               | MouseListener       |
| KeyEvent        | 键盘输入                 | KeyListener         |
| FocusEvent      | 组件收到或失去焦点       | FocusListener       |
| AdjustmentEvent | 移动了滚动条等组件       | AdjustmentListener  |
| ComponentEvent  | 对象移动缩放显示隐藏等   | ComponentListener   |
| WindowEvent     | 窗口收到窗口级事件       | WindowListener      |
| ContainerEvent  | 容器中增加删除了组件     | ContainerListener   |
| TextEvent       | 文本字段或文本区发生改变 | TextListener        |


菜单组件
------------------------------------
| 菜单组件名称     | 功能                                                                      |
| ---------------- | ------------------------------------------------------------------------- |
| MenuBar          | 菜单条 ， 菜单的容器 。                                                   |
| Menu             | 菜单组件 ， 菜单项的容器 。 它也是Menultem的子类 ，所以可作为菜单项使用   |
| PopupMenu        | 上下文菜单组件(右键菜单组件)                                              |
| Menultem         | 菜单项组件 。                                                             |
| CheckboxMenuItem | 复选框菜单项组件                                                          |


Swing
------------------------------------
Swing 组件采用 MVC(Model-View-Controller， 即模型一视图一控制器)设计模式：


模型(Model): 用于维护组件的各种状态；
视图(View): 是组件的可视化表现；
控制器(Controller):用于控制对于各种事件、组件做出响应 。

当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。
Swing使用UI代理来包装视图和控制器， 还有一个模型对象来维护该组件的状态。
例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象 。 
Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。
   
Swing组件层次
------------------------------------
大部分Swing 组件都是 JComponent抽象类的直接或间接子类(并不是全部的 Swing 组件)
JComponent 类定义了所有子类组件的通用方法
JComponent 类是 AWT 里 java.awt. Container 类的子类
绝大部分 Swing 组件类继承了 Container类，所以Swing 组件都可作为 容器使用 ( JFrame继承了Frame 类)。

Swing组件和AWT组件的对应关系：
大部分情况下，只需要在AWT组件的名称前面加个J，就可以得到其对应的Swing组件名称，但有几个例外：
1. JComboBox: 对应于 AWT 里的 Choice 组件，但比 Choice 组件功能更丰富 。
2. JFileChooser: 对应于 AWT 里的 FileDialog 组件 。
3. JScrollBar: 对应于 AWT 里的 Scrollbar 组件，注意两个组件类名中 b 字母的大小写差别。
4. JCheckBox : 对应于 AWT 里的 Checkbox 组件， 注意两个组件类名中 b 字母的大小 写差别 。
5. JCheckBoxMenultem: 对应于 AWT 里的 CheckboxMenuItem 组件，注意两个组件类名中 b字母的大小写差别。

Swing组件按照功能来分类：
------------------------------------
​1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。
2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。
3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。
4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。
5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。
6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。
7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。

Swing 组件具有如下 4 个额外的功能 :
------------------------------------
1.可以为 Swing 组件设置提示信息。使用 setToolTipText()方法，为组件设置对用户有帮助的提示信息 。
  
2.很多 Swing 组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在 Swing 组件中使用图标， Swing为Icon 接口提供了 一个实现类: Imagelcon ，该实现类代表一个图像图标。
  
3.支持插拔式的外观风格。每个 JComponent 对象都有一个相应的 ComponentUI 对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。 ComponentUI 对象依赖当前使用的 PLAF ， 使用 UIManager.setLookAndFeel()方法可以改变图形界面的外观风格 。
  
4.支持设置边框。Swing 组件可以设置一个或多个边框。 Swing 中提供了各式各样的边框供用户边用，也能建立组合边框或自己设计边框。 一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。



------------------------------------
1.Swing菜单项指定快捷键时必须通过`组件名.setAccelerator(keyStroke.getKeyStroke("大写字母",InputEvent.CTRL_MASK))`方法来设置，其中KeyStroke代表一次击键动作，可以直接通过按键对应字母来指定该击键动作 。

2.更新JFrame的风格时，调用了` SwingUtilities.updateComponentTreeUI(f.getContentPane());`这是因为如果直接更新 JFrame 本身 ，将会导致 JFrame 也被更新， JFrame 是一个特殊的容器 ， JFrame 依然部分依赖于本地平台的图形组件 。如果强制 JFrame 更新，则有可能导致该窗口失去标题栏和边框 。

3.给组件设置右键菜单，不需要使用监听器，只需要调用setComponentPopupMenu()方法即可，更简单。

4.关闭JFrame窗口，也无需监听器，只需要调用setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)方法即可，更简单。

5.如果需要让某个组件支持滚动条，只需要把该组件放入到JScrollPane中，然后使用JScrollPane即可。

为组件设置边框
------------------------------------
特殊的Border
1. TitledBorder:它的作用并不是直接为其他组件添加边框，而是为其他边框设置标题，创建该类的对象时，需要传入一个其他的Border对象；
2. ComoundBorder:用来组合其他两个边框，创建该类的对象时，需要传入其他两个Border对象，一个作为内边框，一个座位外边框

给组件设置边框步骤：
1. 使用BorderFactory或者XxxBorder创建Border的实例对象；
2. 调用Swing组件的setBorder（Border b）方法为组件设置边框；

Swing组件按照功能来分类：

1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。
2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。
3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。
4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。
5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。
6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。
7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。

JToolBar  API:

| 方法名称                                 | 方法功能                                                     |
| ---------------------------------------- | ------------------------------------------------------------ |
| JToolBar( String name , int orientation) | 创建一个名字为name，方向为orientation的工具条对象，其orientation的是取值可以是SwingConstants.HORIZONTAL或SwingConstants.VERTICAL |
| JButton add(Action a)                    | 通过Action对象为JToolBar工具条添加对应的工具按钮             |
| addSeparator( Dimension size )           | 向工具条中添加指定大小的分隔符                               |
| setFloatable( boolean b )                | 设定工具条是否可以被拖动                                     |
| setMargin(Insets m)                      | 设置工具条与工具按钮的边距                                   |
| setOrientation( int o )                  | 设置工具条的方向                                             |
| setRollover(boolean rollover)            | 设置此工具条的rollover状态                                   |

Swing提供了JColorChooser和JFileChooser
这两种对话框，可以很方便的完成颜色的选择和本地文件的选择。

JOptionPane 可以非常方便地创建一些简单的对话框， 
Swing 已经为这些对话框添加了相应的组件，无须程序员手动添加组件 。

 JOptionPane 提供了如下 4 个方法来创建对话框 。
| 方法名称                                    | 方法功能                                                                                        |
| ------------------------------------------- | ------------------------------------------------------------------------------------------- |
| showMessageDialog/showInternalMessageDialog | 消息对话框 ，告知用户某事己发生 ， 用户只能单击"确定"按钮 ， 类似于 JavaScript 的 alert 函数 。                               |
| showConfirmDialog/showInternalConfirmDialog | 确认对话框，向用户确认某个问题，用户可以选择 yes 、 no ~ cancel 等选项 。 类似于 JavaScript 的 comfirm 函数 。该方法返回用户单击了 哪个按钮 |
| showInputDialog/showInternalInputDialog     | 输入对话框，提示要求输入某些信息，类似于 JavaScript的 prompt 函数。该方法返回用户输入的字符串 。                                  |
| showOptionDialog/showInternalOptionDialog   | 自定义选项对话框 ，允许使用自 定义选项 ，可以取代showConfirmDialog 所产生的对话框，只是用起来更复杂 。                              |

showXxxDialog(Component parentComponent,
        Object message, 
        String title, 
        int optionType, 
        int messageType,
            Icon icon,
        Object[] options, 
        Object initialValue)
--参数解释：
parentComponent：当前对话框的父组件
message：对话框上显示的信息，信息可以是字符串、组件、图片等
title：当前对话框的标题
optionType：当前对话框上显示的按钮类型：DEFAULT_OPTION、YES_NO_OPTION、YES_NO_CANCEL_OPTION、OK_CANCEL_OPTION
messageType:当前对话框的类型:ERROR_MESSAGE、INFORMATION_MESSAGE、WARNING_MESSAGE、QUESTION_MESSAGE、PLAIN_MESSAGE
icon:当前对话框左上角的图标
options:自定义下拉列表的选项
initialValue:自定义选项中的默认选中项

**当用户与对话框交互结束后，不同类型对话框的返回值如下：**

- showMessageDialog: 无返回值 。
- showlnputDialog: 返回用户输入或选择的字符串 。
- showConfirmDialog: 返回 一个整数代表用户选择的选项 。
- showOptionDialog : 返回 一个整数代表用户选择的选项，如果用户选择第一项，则返回 0; 如果选择第二项，则返回1……依此类推 。

**对 showConfirmDialog 所产生的对话框，有如下几个返回值：**

- YES OPTION: 用户 单击了 "是"按钮后返回 。
- NO OPTION: 用 户单击了"否"按钮后返回 。
- CANCEL OPTION: 用户单击了"取消"按钮后返回 。
- OK OPTION : 用户单击了"确定"按钮后返回 。
- CLOSED OPTION: 用户 单击了对话框右上角的 " x" 按钮后返回。

------------------------------------
JSplitPane
------------------------------------
JSplitPane 用于创建一个分割面板,它可以将 一个组件(通常是一个容器)分割成两个部分，
并提供一个分割条 ， 用户可以拖动该分割条来调整两个部分的大小。

通过如下构造方法可以创建JSplitPane对象
JSplitPane(int newOrientation, Component newLeftComponent,Component newRightComponent)

    newOrientation：指定JSplitPane容器的分割方向：
		如果值为JSplitPane.VERTICAL_SPLIT,为纵向分割；
		如果值为JSplitPane.HORIZONTAL_SPLIT，为横向分割；
    newLeftComponent：左侧或者上侧的组件；
    newRightComponent：右侧或者下侧的组件；


2. 设置是否开启连续布局的支持(可选)
------------------------------------
setContinuousLayout(boolean newContinuousLayout):
    默认是关闭的，如果设置为true，则打开连续布局的支持，但由于连续布局支持需要不断的重绘组件，所以效率会低一些


3. 设置是否支持"一触即展"的支持(可选)
------------------------------------
setOneTouchExpandable(boolean newValue):
    默认是关闭的，如果设置为true，则打开"一触即展"的支持


4. 其他设置
------------------------------------
setDividerLocation(double proportionalLocation):设置分隔条的位置为JSplitPane的某个百分比
setDividerLocation(int location)：通过像素值设置分隔条的位置
setDividerSize(int newSize)：通过像素值设置分隔条的大小
setLeftComponent(Component comp)/setTopComponent(Component comp)/setRightComponent(Component comp)/setBottomComponent(Component comp):
设置指定位置的组件

setPreferredSize(new Dimension(150,400));
------------------------------------
setPreferredSize()是Java Swing中的一个方法,用于设置组件的首选大小
Dimension 封装了一个构件的高度和宽度。

JTabledPane
------------------------------------
JTabbedPane可以很方便地在窗口上放置多个标签页，每个标签页相当于获得了一个与外部容器具有相同大小的组件摆放区域

1. 创建JTabbedPane对象
------------------------------------
 JTabbedPane(int tabPlacement, int tabLayoutPolicy):
    tabPlacement:
        指定标签标题的放置位置，可以选择 SwingConstants中的四个常量：TOP、LEFT、BOTTOM、RIGHT
    tabLaoutPolicy:
        指定当窗口不能容纳标签页标题时的布局策略，可以选择JTabbedPane.WRAP_TAB_LAYOUT和JTabbedPane.SCROLL_TAB_LAYOUT


2. 通过JTabbedPane对象堆标签进行增删改查
------------------------------------
addTab(String title, Icon icon, Component component, String tip):添加标签
    title:标签的名称
    icon:标签的图标
    component:标签对应的组件
    tip:光标放到标签上的提示

insertTab(String title, Icon icon, Component component, String tip, int index):插入标签页
    title:标签的名称
    icon:标签的图标
    component:标签对应的组件
    tip:光标放到标签上的提示
    index:在哪个索引处插入标签页
setComponentAt(int index, Component component):修改标签页对应的组件
    index:修改哪个索引处的标签
    component:标签对应的组件
removeTabAt(int index):
    index:删除哪个索引处的标签

3. 设置当前显示的标签页
------------------------------------
setSelectedIndex(int index):设置哪个索引处的标签被选中

4. 设置JTabbedPane的其他属性
------------------------------------
setDisabledIconAt(int index, Icon disabledIcon): 将指定位置的禁用图标设置为 icon，该图标也可以是null表示不使用禁用图标。
setEnabledAt(int index, boolean enabled): 设置指定位置的标签页是否启用。
setTitleAt(int index, String title): 设置指定位置标签页的标题为 title，该title可以是null,这表明设置该标签页的标题为空。
setToolTipTextAt(int index, String toolTipText): 设置指定位置标签页的提示文本 。

5. 为JTabbedPane设置监听器
------------------------------------
addChangeListener(ChangeListener l)


JLayeredPane
------------------------------------
LayeredPane是 一个代表有层 次深度的容器 ， 它允许组件在需要 时 互相重叠。
了如下几个默认层：

1. DEFAULT_LAYER:大多数组件位于标准层，这是最底层；
2. PALETTE_LAYER : 调色板层位于默认层之上 。该层对于浮动工具栏和调色板很有用，因此可以位于其他组件之上 。
3. MODAL_LAYER: 该层用于显示模式对话框。它们将出现在容器中所有工具栏 、调色板或标准组件的上面 。
4. POPUP_LAYER : 该层用于显示右键菜单 ， 与对话框 、工具提示和普通组件关联的弹出式窗口将出现在对应的对话框、工具提示和普通组件之上。
5. DRAG_LAYER: 该层用于放置拖放过程中的组件(关于拖放操作请看下一节内 容) ，拖放操作中的组件位于所有组件之上 。 一旦拖放操作结束后 ， 该组件将重新分配到其所属的正常层。

JLayeredPane 方法：

1. moveToBack(Component c)：把当前组件c移动到所在层的所有组件的最后一个位置；
2. moveToFront(Component c)：把当前组件c移动到所在层的所有组件的第一个位置；
3. setLayer(Component c, int layer)：更改组件c所处的层；

需要注意的是，往JLayeredPane中添加组件，如果要显示，则必须手动设置该组件在容器中显示的位置以及大小。

------------------------------------
JProcessBar、ProcessMonitor、BoundedRangeModel实现进度条
------------------------------------

1. 创建JProgressBar对象
------------------------------------
public JProgressBar(int orient, int min, int max):
    orint:方向
    min:最小值
    max:最大值

2. 设置属性
------------------------------------
setBorderPainted(boolean b):设置进度条是否有边框
setIndeterminate(boolean newValue):设置当前进度条是不是进度不确定的进度条，如果是，则将看到一个滑块在进度条中左右移动
setStringPainted(boolean b)：设置进度条是否显示当前完成的百分比

3. 获取和设置当前进度条的进度状态
------------------------------------
setValue(int n):设置当前进度值
double getPercentComplete():获取进度条的完成百分比
String  getStrin():返回进度字符串的当前值


Swing 组件大都将外观显示和 内部数据分离(MVC模式)
------------------------------------
JProgressBar 组件有一个内置的用于保存其状态数据的Model对象

ProgressMonitor创建进度对话框
------------------------------------
public ProgressMonitor(Component parentComponent,Object message,String note, int min,int max):
    parentComponent:对话框的父组件
    message:对话框的描述信息
    note:对话框的提示信息
    min:进度条的最小值
    max:进度条的最大值

JList、JComboBox实现列表框
------------------------------------
JList 和 JComboBox 都是极其相似的，它们都有一个列表框，只是 JComboBox的列表框需要 以下拉方式显示出来

1. 创建JList或JComboBox对象
------------------------------------
JList(final E[] listData):创建JList对象，把listData数组中的每项内容转换成一个列表项展示
JList(final Vector<? extends E> listData):创建JList对象，把listData数组中的每项内容转换成一个列表项展示
JComboBox(E[] items):
JComboBox(Vector<E> items):

2. 设置JList或JComboBox的外观行为
---------------------------JList----------------------------------------------
addSelectionInterval(int anchor, int lead):在已经选中列表项的基础上，增加选中从anchor到lead索引范围内的所有列表项
setFixedCellHeight(int height)/setFixedCellWidth(int width):设置列表项的高度和宽度
setLayoutOrientation(int layoutOrientation)：设置列表框的布局方向
setSelectedIndex(int index)：设置默认选中项
setSelectedIndices(int[] indices)：设置默认选中的多个列表项
setSelectedValue(Object anObject,boolean shouldScroll)：设置默认选中项，并滚动到该项显示
setSelectionBackground(Color selectionBackground)：设置选中项的背景颜色
setSelectionForeground(Color selectionForeground)：设置选中项的前景色
setSelectionInterval(int anchor, int lead):设置从anchor到lead范围内的所有列表项被选中
setSelectionMode(int selectionMode)：设置选中模式，默认没有限制，也可以设置为单选或者区域选中
setVisibleRowCount(int visibleRowCount)：设置列表框的可是高度足以显示多少行列表项
---------------------------JComboBox---------------------------------------------- 
setEditable(boolean aFlag)：设置是否可以直接修改列表文本框的值，默认为不可以
setMaximumRowCount(int count)：设置列表框的可是高度足以显示多少行列表项
setSelectedIndex(int anIndex)：设置默认选中项
setSelectedItem(Object anObject)：根据列表项的值，设置默认选中项


不强制存储列表项的ListModel和ComboBoxModel
------------------------------------
与JProgressBar一样，JList和JComboBox也采用了MVC的设计模式，J
List和JComboBox只负责外观的显示，而组件底层的状态数据则由对应的Model来维护
public interface ListModel<E>{

  int getSize();

  E getElementAt(int index);

  void addListDataListener(ListDataListener l);

  void removeListDataListener(ListDataListener l);
}

public interface ComboBoxModel<E> extends ListModel<E> {

  void setSelectedItem(Object anItem);

  Object getSelectedItem();
}

强制存储列表项的DefaultListModel和DefaultComboBoxModel
------------------------------------
当使用JList 或 JComboBox 时 常常还需要动态地增加、删除列表项,例如JCombox提供了下列方法完成增删操作
addItem(E item):添加一个列表项
insertItemAt(E item, int index)：向指定索引处插入一个列表项
removeAllItems()：删除所有列表项
removeItem(Object anObject)：删除指定列表项
removeItemAt(int anIndex)：删除指定索引处的列表项

DefaultListModel 提供了如下几个方法来添加、删除元素
------------------------------------
add(int index, E element): 在该 ListModel 的指定位置处插入指定元素 。
addElement(E obj): 将指定元素添加到该 ListModel 的末尾 。
insertElementAt(E obj, int index): 在该 ListModel 的指定位置处插入指定元素 。
Object remove(int index): 删除该 ListModel 中指定位置处的元素 
removeAllElements(): 删 除该 ListModel 中的所有元素，并将其的大小设置为零 。
removeElement(E obj): 删除该 ListModel 中第一个与参数匹配的元素。
removeElementAt(int index): 删除该 ListModel 中指定索引处的元素 。
removeRange(int 企omIndex ， int toIndex): 删除该 ListModel 中指定范围内的所有元素。
set(int index, E element) : 将该 ListModel 指定索引处的元素替换成指定元素。
setElementAt(E obj, int index): 将该 ListModel 指定索引处的元素替换成指定元素。


使用ListCellRenderer改变列表外观
------------------------------------
public interface ListCellRenderer<E>
{
    Component getListCellRendererComponent(
        JList<? extends E> list,//列表组件
        E value,//当前列表项的值额索引
        int index,//当前列表项d
        boolean isSelected,//当前列表项是否被选中
        boolean cellHasFocus);//当前列表项是否获取了焦点
}


JTree、TreeModel实现树
------------------------------------
树也是图形用户界面中使用非常广泛的 GUI 组件，例如使用 Windows 资源管理器时，将看到如下图所示的目录树

当一个结点具有子结点时，该结点有两种状态：

​ 展开状态:当父结点处于展开状态时，其子结点是可见的；

​ 折叠状态: 当父结点处于折叠状态时，其子结点都是不可见的 。

JTree(TreeModel newModel):使用指定 的数据模型创建 JTree 对象，它默认显示根结点。
JTree(TreeNode root): 使用 root 作为根节 点创建 JTree 对象，它默认显示根结点 。
JTree(TreeNode root, boolean asksAllowsChildren): 使用root作为根结点创建JTree对象，
它默认显示根结点。 asksAllowsChildren 参数控制怎样的结点才算叶子结点，如果该参数为 true ，
则只有当程序使用 setAllowsChildren(false)显式设置某个结点不允许添加子结点时(以后也不会拥有子结点) ，
该结点才会被 JTree 当成叶子结点:如果该参数为 false ，则只要某个结点当时没有子结点(不管以后是否拥有子结点) 
，该结点都会被 JTree 当成叶子结点。


JTree的其他外观设置方法
------------------------------------
tree.putClientProperty( "JTree.lineStyle", "None"):设置结点之间没有连接线
tree.putClientProperty("JTree.lineStyle" , "Horizontal")：设置结点之间只有水平分割线
tree.setShowsRootHandles(true)：设置根结点有"展开、折叠"图标
tree.setRootVisible(false)：隐藏根结点

DefaultMutableTreeNode其他成员方法：
------------------------------------
Enumeration breadthFirstEnumerationO/preorderEnumeration(): 按广度优先的顺序遍历以此结点为根的子树，并返回所有结点组成的枚举对象 。
Enumeration depthFirstEnumerationO/postorderEnumeration(): 按深度优先的顺序遍历以此结点为根的子树，并返回所有结点组成的枚举对象 。
DefaultMutableTreeNode getNextSibling(): 返回此结点的下一个兄弟结点 。
TreeNode getParent(): 返回此结点的父结点 。 如果此结点没有父结点，则返回null 。
TreeNode[] getPath(): 返回从根结点到达此结点的所有结点组成的数组。
DefaultMutableTreeNode getPreviousSibling(): 返回此结点的上一个兄弟结点。
TreeNode getRoot(): 返回包含此结点的树的根结点 。
TreeNode getSharedAncestor(DefaultMutableTreeNode aNode): 返回此结点和aNode最近的共同祖先 。
int getSiblingCount(): 返回此结点的兄弟结点数 。
boolean isLeaf(): 返回该结点是否是叶子结点 。
boolean isNodeAncestor(TreeNode anotherNode): 判断anotherNode是否是当前结点的祖先结点(包括父结点) 。
boolean isNodeChild(TreeNode aNode): 如果aNode是此结点的子结点，则返回true。
boolean isNodeDescendant(DefaultMutableTreeNode anotherNode): 如果 anotherNode 是此结点的后代，包括是此结点本身、此结点的子结点或此结点的子结点的后代，都将返回true 。
boolean isNodeRelated(DefaultMutableTreeNode aNode) : 当aNode和当前结点位于同一棵树中时返回 true 。
boolean isNodeSibling(TreeNode anotherNode): 返回anotherNode是否是当前结点的兄弟结点 。
boolean isRoot(): 返回当前结点是否是根结点 。
Enumeration pathFromAncestorEnumeration(TreeNode ancestor): 返回从指定祖先结点到当前结点的所有结点组成的枚举对象 。

2 拖动、编辑树结点
------------------------------------
JTree 的setEditable(boolean b)方法，传入 true 即可把这棵树变成可编辑的树
(可以添加、删除结点，也可以改变结点数据)

获取当前被选中的结点，会有两种方式：
一：
	通过JTree对象的某些方法，例如 TreePath getSelectionPath()等，得到一个TreePath对象，
	包含了从根结点到当前结点路径上的所有结点；
	调用TreePath对象的 Object getLastPathComponent()方法，得到当前选中结点
二：
	调用JTree对象的 Object getLastSelectedPathComponent() 方法获取当前被选中的结点
	
JTree监听事件
------------------------------------
JTree 专门提供了 一个 TreeSelectionModel 对象来保存该 JTree 选中状态的信息 。
1. TreeSelectionModel.CONTIGUOUS_TREE_SELECTION: 可 以连续选中多个 TreePath 。
2. TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION : 该选项对于选择没有任何限制 。
3. TreeSelectionModel.SINGLE_TREE_SELECTION: 每次只能选择一个 TreePath 。

为JTree添加监听器:
1. addTreeExpansionListener(TreeExpansionListener tel) : 添加树节点展开/折叠事件的监听器。
2. addTreeSelectionListener(TreeSelectionListener tsl) : 添加树节点选择事件的监听器。

使用DefaultTreeCellRenderer改变结点外观
------------------------------------
- 使用 DefaultTreeCellRenderer 直接改变节点的外观，这种方式可 以 改变整棵树所有节点 的字体、颜色和图标 。
- 为 JTree 指定 DefaultTreeCellRenderer 的扩展类对象作为 JTree 的节点绘制器，该绘制器负责为不同节点使用不同的字体、颜色和图标。通常使用这种方式来改变节点的外观 。
- 为 JTree 指定一个实现 TreeCellRenderer 接口的节点绘制器，该绘制器可以为不同的节点自由绘制任意内容，这是最复杂但最灵活的节点绘制器 。

setBackgroundNonSelectionColor(Color newColor): 设置用于非选定节点的背景颜色 。
setBackgroundSelectionColor(Color newColor): 设置节点在选中状态下的背景颜色 。
setBorderSelectionColor(Color newColor): 设置选中状态下节点的边框颜色 。
setClosedIcon(Icon newIcon): 设置处于折叠状态下非叶子节点的图标 。
setFont(Font font) : 设置节点文本 的 字体。
setLeaflcon(Icon newIcon): 设置叶子节点的图标 。
setOpenlcon(Icon newlcon): 设置处于展开状态下非叶子节 点的图标。
setTextNonSelectionColor(Color newColor): 设置绘制非选中状态下节点文本的颜色 。
setTextSelectionColor(Color newColor): 设置绘制选中状态下节点文本的颜色 。

扩展DefaultTreeCellRenderer改变结点外观
------------------------------------
DefaultTreeCellRenderer 实现类实现了TreeCellRenderer接口
该接口里只有 一个用于绘制节点内容的方法: getTreeCellRendererComponent()

JTable、TableModel实现表格
------------------------------------
表格也是GUI程序中常用的组件，表格是一个由多行、多列组成的二维显示区
Swing 的 JTable 以及相关类提供了这种表格支持

JTable调整列
------------------------------------
1. JTable.AUTO_RESIZE_OFF: 关闭表格的自动调整功能。当调整某一列的宽度时，其他列的宽度不会发生变化；
2. JTable.AUTO_RESIZE_NEXT_COLUMN:只调整下一列的宽度，其他列及表格的宽度不会发生改变；
3. JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS:平均调整当前列后面所有列的宽度，当前列的前面所有列及表格的宽度都不会发生变化，这是默认的调整方式
4. JTable.AUTO_RESIZE_LAST_COLUMN:只调整最后一列的宽度，其他列及表格的宽度不会发生变化；
5. JTable.AUTO_RESIZE_ALL_COLUMNS:平均调整表格中所有列的宽度，表格的宽度不会发生改变

TableColumn 具有如下方法 
------------------------------------
1. setMaxWidth(int maxWidth): 设置该列的最大宽度 。 如果指定的 maxWidth 小于该列的最小宽度， 则 maxWidth 被设置成最小宽度 。
2. setMinWidth(int minWidth): 设置该列的最小宽度 。
3. setPreferredWidth(int preferredWidth): 设置该列的最佳宽度 。
4. setResizable(boolean isResizable): 设置是否可以调整该列的 宽度 。
5. sizeWidthToFit(): 调整该列的宽度，以适合其标题单元格的 宽度 。

JTable调整选择模式
------------------------------------
1. 选则行：JTable默认的选择方式就是选择行，也可以调用setRowSelectionAllowed(boolean rowSelectionAllowed)来修改；
2. 选择列：调用 setColumnSelectionAllowed(boolean columnSelectionAllowed)方法，修改当前JTable的选择模式为列；
3. 选择单元格：setCellSelectionEnabled(boolean cellSelectionEnabled) ，修改当前JTable的选择模式为单元格；

JTable调整表格选择状态
------------------------------------
1. ListSelectionMode.MULTIPLE_INTERVAL_SELECTION:没有任何限制，可以选择表格中任何表格单元，这是默认的选择模式 。 通过 Shi负和 Ctrl 辅助键的帮助可以选择多个表格单元 。
  
2. ListSelectionMode.SINGLE_INTERVAL_SELECTION:选择单个连续区域，该选项可以选择多个表格单元，但多个表格单元之间必须是连续的 。 通过 Shift 辅助键的帮助来选择连续区域。
  
3. ListSelectionMode.SINGLE_SELECTION:只能选择单个表格单元 。

TableModel和监听器
------------------------------------
使用TableModel步骤：

1. 自定义类，继承AbstractTableModel抽象类，重写下面几个方法：
------------------------------------
int getColumnCount():返回表格列的数量
int getRowCount()：返回表格行的数量
Object getValueAt(int rowIndex, int columnIndex)：返回rowIndex行，column列的单元格的值
String getColumnName(int columnIndex)：返回columnIndex列的列名称
boolean isCellEditable(int rowIndex, int columnIndex)：设置rowIndex行，columnIndex列单元格是否可编辑
setValueAt(Object aValue, int rowIndex, int columnIndex)：设置rowIndex行，columnIndex列单元格的值


addColumn(Object columnName)/addColumn(Object columnName, Object[] columnData):添加一列
addRow(Object[] rowData)：添加一行
insertRow(int row, Object[] rowData)：指定位置处插入一行
removeRow(int row)：删除一行
moveRow(int start, int end, int to)：移动指定范围内的数据行

TableColumnModel和监听器
------------------------------------
1.addColumn(TableColumn aColumn): 该方法用于为 TableModel 添加一列 。 该方法主要用于将原来隐藏的数据列显示出来 。
2.moveColumn(int columnIndex, int newIndex): 该方法用于将指定列移动到其他位置 。
3.removeColumn(TableColumn column): 该方法用于从 TableModel 中删 除指定列。实际上，该方法并未真正删除指定列，只是将该列在TableColumnModel 中隐藏起来，使之不可见 。

ddColumnModelListener()方法来添加监听器， 该监听器接口里包含如下几个方法 ：
------------------------------------
1. columnAdded(TableColumnModelEvent e) : 当向 TableColumnModel 里添加数据列时将会触发该方法。
2. columnMarginChanged(ChangeEvent e) : 当由于页面距 ( Margin ) 的改变引起列状态改变时将会触发该方法 。
3. columnMoved(TableColumnModelEvent e): 当移动 TableColumnModel 里的数据列时将会触发该方法 。
4. columnRemoved(TableColumnModelEvent e): 当删除 TableColumnModel 里的数据列时将会触发该方法 。
5. columnSelectionChanged(ListSelectionEvent e): 当改变表格的选择模式时将会触发该方法。