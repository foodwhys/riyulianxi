设计模式的目的
---------------------------
设计模式是为了让程序(软件)，具有更好
1) 代码重用性 (即：相同功能的代码，不用多次编写)
2) 可读性 (即：编程规范性, 便于其他程序员的阅读和理解)
3) 可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护
4) 可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)
5) 使程序呈现高内聚，低耦合的特性

设计模式常用的七大原则有
---------------------------
1) 单一职责原则
	一个类应该只负责一项职责
2) 接口隔离原则
	一个类对另一个类的依赖应该建立在最小的接口上
3) 依赖倒转原则
	功能写在被依赖的类的方法中
	使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，
4) 里氏替换原则
	在子类中尽量不要重写父类的方法
	所有引用基类的方法必须透明地使用其他子类的对象
5) 开闭原则 ocp
	对扩展开放(提供方)，对修改关闭(使用方)
6) 迪米特法则（最少知道原则）
	对自己依赖的类知道的越少越好
	应该避免类中出现这样非直接朋友关系的耦合
	直接朋友 两个对象之间有耦合关系，就说对象之间是朋友关系
	耦合的方式很多，依赖，关联，组合，聚合等。
	我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友
	而出现在局部变量中的类不是直接的朋友
7) 合成复用原则
	原则是尽量使用合成／聚合的方式，而不是使用继承
	
在记录
---------------------------
	依赖： 对象构造方法中传入
	聚合： set方法传入
	组合： new生成

依赖关系
---------------------------
1.类中使用到对方
2.如果是类的成员属性
3.如果是方法的返回类型
4.是方法接收的参数类型
5.方法中使用到

泛化关系
---------------------------
1.泛化关系实际就是继承关系
2.如果A类继承了B类，我们就说A和B存在泛化关系

结构型模式
---------------------------
站在类的角度思考问题

行为型模式
---------------------------
站在方法的角度思考问题


MUL中的关系表示
---------------------------

表示依赖（Dependency）
---------------------------
虚线+大括号（--->）

表示关联（Association）
---------------------------
实线（——）

表示泛化（继承）(Generalization)
---------------------------
实线+空心三角（——▷）

表示实现（Realization）
---------------------------
虚线+空心三角（---▷）

表示聚合（Aggregation）
---------------------------
棱形
实线+空心棱形（——(●'◡'●)）

表示组合（Composite）依赖的一定是实例（非空，必须要有）
---------------------------
实线+实心棱形（——实心正方形压瘪(●'◡'●)）

设计模式类型
---------------------------
1）创建型模式：单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式。
2）结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。
3）行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、
   解释器模式 (Interpreter 模式）、状态模式、策略模式、职责链模式（责任链模式）。
   
单例模式
---------------------------
1) 饿汉式（静态常量）
2) 饿汉式（静态代码块）
3) 懒汉式（线程不安全）
4) 懒汉式（线程安全，同步方法）
5) 懒汉式（线程安全，同步代码块）
6) 双重检查
7) 静态内部类
8) 枚举

