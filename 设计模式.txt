设计模式的目的
---------------------------
设计模式是为了让程序(软件)，具有更好
1) 代码重用性 (即：相同功能的代码，不用多次编写)
2) 可读性 (即：编程规范性, 便于其他程序员的阅读和理解)
3) 可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护
4) 可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)
5) 使程序呈现高内聚，低耦合的特性

设计模式常用的七大原则有
---------------------------
1) 单一职责原则
	一个类应该只负责一项职责
2) 接口隔离原则
	一个类对另一个类的依赖应该建立在最小的接口上
3) 依赖倒转原则
	使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，
4) 里氏替换原则
	在子类中尽量不要重写父类的方法
	所有引用基类的方法必须透明地使用其他子类的对象
5) 开闭原则 ocp
	对扩展开放(提供方)，对修改关闭(使用方)
6) 迪米特法则（最少知道原则）
	对自己依赖的类知道的越少越好
	应该避免类中出现这样非直接朋友关系的耦合
	直接朋友 两个对象之间有耦合关系，就说对象之间是朋友关系
	耦合的方式很多，依赖，关联，组合，聚合等。
	我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友
	而出现在局部变量中的类不是直接的朋友
7) 合成复用原则
	原则是尽量使用合成／聚合的方式，而不是使用继承

---------------------------
MUL中的关系表示
---------------------------

表示依赖（Dependency）
---------------------------
虚线+大括号（--->）

表示关联（Association）
---------------------------
实线（——）

表示泛化（继承）(Generalization)
---------------------------
实线+空心三角（——▷）

表示实现（Realization）
---------------------------
虚线+空心三角（---▷）

表示聚合（Aggregation）
---------------------------
棱形
实线+空心棱形（---(●'◡'●)）

表示组合（Composite）
---------------------------
实线+实心棱形（---实心正方形压瘪(●'◡'●)）

