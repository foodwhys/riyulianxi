HTML固定结构
-------------------
• html标签：网页的整体
• head标签：网页的头部
• body标签：网页的身体
• title标签：网页的标题

骨架结构
-------------------
<html>
	<head>
		<title>网页的标题</title>
	</head>
	<body>
		自己的代码
	</body>
</html>

VS Code的基本快捷键
-------------------
1. 快速生成标签：英文 + tab
2. 保存文件：ctrl + s
3. 快速查看网页效果：右击 → Open in Default Browser
• 快捷键：alt + b
• 注意：必须安装了open in browser 插件

注释的快捷键：
• 在VS Code中：ctrl + /

HTML标签学习
-------------------
让文字强制换行显示：br
水平线标签：hr

第一组
	加粗：b
	下划线：u
	倾斜：i
	删除线：s

第二组：（推荐，语义更强）
	加粗：strong
	下划线：ins
	倾斜：em
	删除线：del

图片标签: img
属性:
	1、src：图片的路径
	2、alt：替换文本 只有当图片加载失败时，才会显示的文字
	3、title：图片的标题 鼠标悬停在图片上时，才会显示的文字
	4、width宽度/height高度 如果只设置了其中的一个，另一个会等比例缩放	 
注意点:
一般只会设置width或者height中的一个，
如果同时设置了两个，图片可能会拉伸变形

路径
-------------------
绝对路径:
	1、在个人电脑中，带有盘符的路径
	2、外部链接，以https://开头的路径

相对路径:
	同级目录
		1、直接写目标文件的名字
	下级目录
		1、写目标文件所在文件夹的名字
		2、进入目录文件夹 "/"
		3、直接写目标文件的名字即可
	上级目录
		1、去上一级目录 "../"
		2、直接写目标文件的名字即可
		
音频标签/视频标签		
-------------------	
audio/video
作用：在网页中插入音频
属性:
	1、src：视频的路径
	2、controls：播放的控件
	3、autoplay：自动播放
	4、loop：循环播放
	
链接标签 a
-------------------
href：告诉浏览器点击之后去哪一个网页
	取值：就是一个路径
	1、外部链接：直接写网址即可（网址需要写完整，https://）
	2、本地网页：直接写路径
	
target：设置跳转方式
	_self:默认值，在当前窗口中进行跳转，原网页不在了
	_blank：在新窗口中进行跳转，原网页还在
	
空链接：
	<a href="#">空链接</a>

在网页中按照行展示关联性的内容
如：新闻列表、排行榜、账单等

无序列表 ul li	
-------------------
 • ul标签中只允许包含li标签
 • li标签可以包含任意内容
 
有序列表 ol li
-------------------
 • ol标签中只允许包含li标签
 • li标签可以包含任意内容
 
自定义列表 dl dt dd 
-------------------
 • dl标签：表示自定义列表的整体
 • dt标签：表示自定义列表的主题
 • dd标签：表示对于主题的每一项内容
 
表格标签 table > tr > td
-------------------
 • table标签：表格整体
 • tr标签：表格每行
 • td标签：对于主题的每一项内容

表格相关属性
-------------------
 • border标签：边框宽度
 • width标签：表格宽度
 • height标签：表格高度
 • caption标签：表格大标题
 • th标签：表格一列小标题，通常第一行

表格的结构标签（了解）
-------------------
 • thead标签：表格头部
 • tbody标签：表格主体
 • tfoot标签：表格底部

合并单元格 
------------------- 
 • rowspan：跨行合并→垂直方向合并
 • colspan：跨列合并→水平方向合并
 
表单标签 input系列标签
-------------------
type属性值：text 
placeholder：占位符，提示用户输入类容文本

value属性：用户输入的内容，提交之后会发送给后端服务器
name属性：当前控件的含义，提交之后可以告诉后端发送过去的数据是什么含义
-------------------
type属性值：password

-------------------
type属性值：radio
 • name属性对于单选框有分组功能
 • 有相同name属性值的单选框为一组，一组中只能同时有一个被选中
-------------------
type属性值：checkbox
checked 默认选中

-------------------
type属性值：file
multiple：多文件选择

-------------------
type属性值：
submit 提交按钮
reset 重置按钮
button 普通按钮

select下拉菜单标签
-------------------
 • select标签：下拉菜单的整体
 • option标签：下拉菜单的每一项
 
textarea文本域标签
-------------------
 • cols：规定了文本域内可见宽度
 • rows：规定了文本域内可见行数
 注意点：
	• 右下角可以拖拽改变大小 
	• 实际开发时针对于样式效果推荐用CSS设置
	
label标签
-------------------
使用方法①：
	1. 使用label标签把内容（如：文本）包裹起来 
	2. 在表单标签上添加id属性 
	3. 在label标签的for属性中设置对应的id属性值
使用方法②： 
	1. 直接使用label标签把内容（如：文本）和表单标签一起包裹起来 
	2. 需要把label标签的for属性删除即可

没有语义的布局标签-div和span	
-------------------
场景：实际开发网页时会大量频繁的使用到div和span这两个没语义的布局标签
div标签：一行只显示一个（独占一行）
span标签：一行可以显示多个

语义化标签
-------------------
div：独占一行
span：一行中可以显示多

有语义的布局标签（了解）
-------------------
 • header：网页头部
 • nav：网页导航
 • footer：网页底部
 • aside：网页侧边栏
 • section：网页区块
 • article：网页文章
 
字符实体 
-------------------
空格的字符实体是
• &nbsp;
>的字符实体是
• &gt;
<的字符实体是？
• &lt;

CSS 语法规则
-------------------

常见属性：
	color: 文字颜色
	font-size:字体大小
	background-color：背景颜色
	width：宽度
	height：高度

CSS常见三种引入方式
-------------------
• 内嵌式
• 外联式
• 行内式

标签选择器
-------------------
结构：标签名 { css属性名：属性值； }
作用：通过标签名，找到页面中所有这类标签，设置样式

注意点：
	1. 标签选择器选择的是一类标签，而不是单独某一个
	2. 标签选择器无论嵌套关系有多深，都能找到对应的标签
	
类选择器	
-------------------
结构：.类名 { css属性名：属性值； }
作用：通过类名，找到页面中所有带有这个类名的标签，设置样式
注意点：
	1. 所有标签上都有class属性，class属性的属性值称为类名（类似于名字）
	2. 类名可以由数字、字母、下划线、中划线组成，但不能以数字或者中划线开头
	3. 一个标签可以同时有多个类名，类名之间以空格隔开
	4. 类名可以重复，一个类选择器可以同时选中多个标签
	
id选择器	
-------------------	
结构：#id属性值 { css属性名：属性值； }
作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式
注意点：
	1. 所有标签上都有id属性
	2. id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的！
	3. 一个标签上只能有一个id属性值
	4. 一个id选择器只能选中一个标签
	
补充：类与id的区别

class类名与id属性值的区别
	• class类名相当于姓名，可以重复，一个标签可以同时有多个class类名
	• id属性值相当于身份证号码，不可重复，一个标签只能有一个id属性值

类选择器与id选择器的区别
	• 类选择器以 . 开头
	• id选择器以 # 开头	

实际开发的情况	
	• 类选择器用的最多
	• id一般配合js使用，除非特殊情况，否则不要使用id设置样式
	• 实际开发中会遇到冗余代码的抽取 （可以将一些公共的代码抽取到一个公共的类中去）
	
通配符选择器	
-------------------
结构：* { css属性名：属性值； }
作用：找到页面中所有的标签，设置样式
注意点：
1. 开发中使用极少，只会在极特殊情况下才会用到
2. 在基础班小页面中可能会用于去除标签默认的margin和padding（后续讲解）

基础选择器
-------------------
1. 选择器作用：选中页面中对应的标签（找她），方便后续设置样式（改她）
2. 标签选择器：标签名 { css属性名：属性值； }
3. 类选择器：.类名 { css属性名：属性值； }
4. id选择器：#id属性值 { css属性名：属性值； }
5. 通配符选择器：* { css属性名：属性值； }

-------------------
字体和文本样式
-------------------

字体大小
-------------------
属性名：font-size
取值：数字 + px
注意点：
	• 谷歌浏览器默认文字大小是16px
	• 单位需要设置，否则无效
	
字体粗细
-------------------
属性名：font-weight
取值：
• 关键字：
	正常：normal
	加粗：bold
	
纯数字：100~900的整百数：
	正常：400
	加粗：700
	
注意点：	
	• 不是所有字体都提供了九种粗细，因此部分取值页面中无变化
	• 实际开发中以：正常、加粗两种取值使用最多。
	
字体样式（是否倾斜）	
-------------------	
属性名：font-style
取值：
• 正常（默认值）：normal
• 倾斜：italic

常见字体系列（了解）
-------------------
无衬线字体（sans-serif）
1. 特点：文字笔画粗细均匀，并且首尾无装饰
2. 场景：网页中大多采用无衬线字体
3. 常见该系列字体：黑体、Arial

衬线字体（serif）
1. 特点：文字笔画粗细不均，并且首尾有笔锋装饰
2. 场景：报刊书籍中应用广泛
3. 常见该系列字体：宋体、Times New Roman

等宽字体（monospace）
1. 特点：每个字母或文字的宽度相等
2. 场景：一般用于程序代码编写，有利于代码的阅读和编写
3. 常见该系列字体：Consolas、fira code

-------------------
字体和文本样式
-------------------

字体系列 font-family
-------------------
渲染规则：
1. 从左往右按照顺序查找，如果电脑中未安装该字体，则显示下一个字体
2. 如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体

注意点：
1. 如果字体名称中存在多个单词，推荐使用引号包裹
2. 最后一项字体系列不需要引号包裹
3. 网页开发时，尽量使用系统常见自带字体，保证不同用户浏览网页都可以正确显示

字体font相关属性的连写
-------------------
属性名：font (复合属性)
取值：
	• font : style weight size family;
省略要求：
	• 只能省略前两个，如果省略了相当于设置了默认值
	
注意点：如果需要同时设置单独和连写形式
	• 要么把单独的样式写在连写的下面
	• 要么把单独的样式写在连写的里面

字体大小： font-size
-------------------
• 数字+px	

字体粗细：font-weight
-------------------
• 正常：normal 或 400
• 加粗：bold 或 700

字体样式：font-style
-------------------
• 正常：normal
• 倾斜：italic

字体系列：font-family
-------------------
• 具体字体1,具体字体2,具体字体3,具体字体4,...,字体系列

字体连写：font
-------------------
• font : style weight size family;


文本缩进
-------------------
属性名：text-indent
取值：
• 数字+px
• 数字+em（推荐：1em = 当前标签的font-size的大小）

 文本水平对齐方式
-------------------
属性名：text-align
取值：
left：左对齐
center：剧中对齐
right：右对齐

• 如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素）设置

水平居中方法总结 text-align : center
-------------------
text-align : center 能让哪些元素水平居中


文本修饰
-------------------
underline:下滑线(常用)
line-through:(不常用)
overline：上划线(几乎不用)
none:无装饰线

• 开发中会使用 text-decoration : none ; 清除a标签默认的下划线

line-height行高
-------------------
作用：控制一行的上下行间距
取值：
• 数字+px
• 倍数（当前标签font-size的倍数）
应用：
1. 让单行文本垂直居中可以设置 line-height : 文字父元素高度
2. 网页精准布局时，会设置 line-height : 1 可以取消上下间距
行高与font连写的注意点：
• 如果同时设置了行高和font连写，注意覆盖问题
• font : style weight size/line-height family ;

后代选择器：空格
-------------------
作用：根据 HTML 标签的嵌套关系，选择父元素 后代中 满足条件的元素
选择器语法：选择器1 选择器2 { css }
结果：
• 在选择器1所找到标签的后代（儿子、孙子、重孙子…）中，找到满足选择器2的标签，设置样式
注意点：
1. 后代包括：儿子、孙子、重孙子……
2. 后代选择器中，选择器与选择器之前通过 空格 隔开

子代选择器：>
-------------------
作用：根据 HTML 标签的嵌套关系，选择父元素 子代中 满足条件的元素
选择器语法：选择器1 > 选择器2 { css }
结果：
• 在选择器1所找到标签的子代（儿子）中，找到满足选择器2的标签，设置样式
注意点：
1. 子代只包括：儿子
2. 子代选择器中，选择器与选择器之前通过 > 隔开

并集选择器：,
-------------------
作用：同时选择多组标签，设置相同的样式
选择器语法：选择器1 ， 选择器2 { css }
结果：
• 找到 选择器1 和 选择器2 选中的标签，设置样式
注意点：
1. 并集选择器中的每组选择器之间通过 , 分隔
2. 并集选择器中的每组选择器可以是基础选择器或者复合选择器
3. 并集选择器中的每组选择器通常一行写一个，提高代码的可读性

交集选择器：紧挨着
-------------------
作用：选中页面中 同时满足 多个选择器的标签
选择器语法：选择器1选择器2 { css }
结果：
• （既又原则）找到页面中 既 能被选择器1选中，
又 能被选择器2选中的标签，设置样式

注意点：
1. 交集选择器中的选择器之间是紧挨着的，没有东西分隔
2. 交集选择器中如果有标签选择器，标签选择器必须写在最前面

hover伪类选择器
-------------------
作用：选中鼠标悬停在元素上的状态，设置样式
选择器语法：选择器:hover { css }
注意点：
1. 伪类选择器选中的元素的某种状态

Emmet语法
-------------------
作用：通过简写语法，快速生成代码
标签名: div  <div></div>
类选择器: .red <div class="red"></div>
id选择器: #one <div id="one"></div>
交际选择器: p.red#one <p class="red" id="one"></p>
子代选择器: ul>li <ul><li></li></ul>
内部文本: ul>li{我是li的内容} <ul><li>我是li的内容</li></ul>
创建多个: ul>li*2 <ul><li></li><li></li></ul>

背景颜色
-------------------
属性名：background-color（bgc）
属性值：
• 颜色取值：关键字、rgb表示法、rgba表示法、十六进制……
注意点：
• 背景颜色默认值是透明： rgba(0,0,0,0) 、transparent
• 背景颜色不会影响盒子大小，并且还能看清盒子的大小和位置，
一般在布局中会习惯先给盒子设置背景颜色

背景图片
-------------------
属性名：background-image（bgi）
属性值：background-image:url('图片路径');
注意点：
• 背景图片中url中可以省略引号
• 背景图片默认是在水平和垂直方向平铺的
• 背景图片仅仅是指给盒子起到装饰效果，
类似于背景颜色，是不能撑开盒子的

背景平铺
-------------------
属性名：background-repeat（bgr）
属性值：
	repeat 默认 水平和垂直方向平铺
	no-repeat 不平铺
	repeat-x 沿着水平方向 x轴 平铺
	repeat-y 沿着垂直方向 y轴 平铺

背景位置
-------------------
属性名：background-position（bgp）
属性值方向名词：
	水平方向：
		left
		center
		right
	垂直方向：
		top
		center
		botton
		
属性值数字+px（坐标）：
	坐标系:
		原点（0,0）
		x轴 水平向右
		y轴 垂直向下
	操作：
		将图片左上角与坐标点重合即可

background（bg）		
-------------------
属性值：
• 单个属性值的合写，取值之间以空格隔开
书写顺序：
• 推荐：background：color image repeat position
省略问题：
• 可以按照需求省略
• 特殊情况：在pc端，
如果盒子大小和背景图片大小一样，
此时可以直接写 background：url()
注意点
• 如果需要设置单独的样式和连写
• ① 要么把单独的样式写在连写的下面
• ② 要么把单独的样式写在连写的里面


（拓展）img标签和背景图片的区别
-------------------
需求：需要在网页中展示一张图片的效果
方法一：直接写上img标签即可
• img标签是一个标签，不设置宽高默认会以原尺寸显示
方法二：div标签 + 背景图片
• 需要设置div的宽高，因为背景图片只是装饰的CSS样式，不能撑开div标签

-------------------
元素显示模式		
-------------------

块级元素
-------------------
显示特点：
1. 独占一行（一行只能显示一个）
2. 宽度默认是父元素的宽度，高度默认由内容撑开
3. 可以设置宽高

代表标签：
div、p、h系列、ul、li、dl、dt、
dd、form、header、nav、footer……

行内元素
-------------------
显示特点：
1. 一行可以显示多个
2. 宽度和高度默认由内容撑开
3. 不可以设置宽高

代表标签：
• a、span 、b、u、i、s、strong、
ins、em、del……

行内块元素
-------------------
显示特点：
1. 一行可以显示多个
2. 可以设置宽高

代表标签：
• input、textarea、button、select……
• 特殊情况：img标签有行内块元素特点，
但是Chrome调试工具中显示结果是inline

元素显示模式转换
-------------------
目的：改变元素默认的显示特点，让元素符合布局要求

display:block  转换成块级元素  使用较多
display:inline-block 转换成行内快元素 使用较多
display:inline 转换成行内元素  极少使用

HTML嵌套规范注意点
-------------------
块级元素一般作为大容器，可以嵌套：

文本、块级元素、行内元素、行内块元素等等……
但是：p标签中不要嵌套div、p、h等块级元素

a标签内部可以嵌套任意元素
但是：a标签不能嵌套a标签

-------------------
居中方法总结
-------------------

水平剧中
text-align:center; 
-------------------
1.文本
2.行内元素 span,a
3.多内块元素 input,img
如果要让以上元素水平剧中，
此时直接设置父元素即可

margin:0 auto;
-------------------
1.块级元素
注意点：直接给当前元素设置

垂直剧中
-------------------
line-height 当行文本

-------------------
CSS 特性
-------------------

可以继承的常见属性
-------------------
1. color
2. font-style、font-weight、font-size、font-family
3. text-indent、text-align
4. line-height

注意点：
• 可以通过调试工具判断样式是否可以继承

层叠性
-------------------
特性：
	1. 给同一个标签设置不同的样式 →
	此时样式会层叠叠加 → 
	会共同作用在标签上
	2. 给同一个标签设置相同的样式 → 
	此时样式会层叠覆盖 → 
	最终写在最后的样式会生效
	
注意点：
1. 当样式冲突时，
只有当选择器优先级相同时，
才能通过层叠性判断结果

优先级的介绍
-------------------
特性：不同选择器具有不同的优先级，
优先级高的选择器样式会覆盖优先级低选择器样式

优先级公式：
• 继承 < 通配符选择器 < 标签选择器 < 
类选择器 < id选择器 < 行内样式 < !important

-------------------
CSS 三大特性
-------------------
场景：如果是复合选择器，
此时需要通过权重叠加计算方法，
判断最终哪个选择器优先级最高会生效

权重叠加计算公式：（每一级之间不存在进位）

 第一级  |第二级  |第三级  |第四级
|--------+--------+--------+----------|
|行内样式|id选择器|类选择器|标签选择器|       
|--------+--------+--------+----------| 

PxCook
-------------------
1. 通过软件打开设计图
① 打开软件 ② 拖拽入设计图 ③ 新建项目
2. 常用快捷键
1. 放大设计图：ctrl + +
2. 缩小设计图：ctrl + -
3. 移动设计图：空格按住不放，鼠标拖动
3. 常用工具
1. 量尺寸
2. 吸颜色
4. 从psd文件中直接获取数据
1. 切换到开发界面，直接点击获取数据

-------------------
盒子模型
-------------------

1. 盒子的概念
-------------------
1. 盒子的概念
1. 页面中的每一个标签，都可看做是一个 “盒子”，
通过盒子的视角更方便的进行布局

2. 浏览器在渲染（显示）网页时，
会将网页中的元素看做是一个个的矩形区域，
我们也形象的称之为 盒子	

2. 盒子模型
-------------------
CSS 中规定每个盒子分别由：
	内容区域（content）
	内边距区域（padding）
	边框区域（border）
	外边距区域（margin）
	构成，这就是 盒子模型

内容区域的宽度和高度
-------------------
作用：利用 width 和 height 
属性默认设置是盒子 内容区域 的大小

属性：width / height
常见取值：数字+px

边框（ border ）
-------------------
作用：给设置边框粗细、边框样式、边框颜色效果

边框粗细 border-width  数字+px
边框样式 border-style 实线solid，
		虚线dashed，点线dotted
边框颜色 border-color 颜色取值

属性名：border
属性值：单个取值的连写，取值之间以空格隔开
• 如：border : 10px solid red;
快捷键：bd + tab

边框（border）- 单方向设置
-------------------
场景：只给盒子的某个方向单独设置边框
属性名：border - 方位名词
属性值：连写的取值

盒子实际大小初级计算公式
-------------------
• 注意点： ① 设置width和height是内容的宽高！
           ② 设置border会撑大盒子！
		   
盒子实际大小初级计算公式：		   		   
• 盒子宽度 = 左边框 + 内容宽度 + 右边框
• 盒子高度 = 上边框 + 内容高度 + 下边框

解决：当盒子被border撑大后，如何满足需求？
• 解决：计算多余大小，手动在内容中减去（手动内减）

内边距（ padding ）
-------------------
作用：设置 边框 与 内容区域 之间的距离
属性名：padding

一个值 padding:10px; 上下左右设置为10px
两个值 padding:10px 20px; 上下设置10px,左右设置为20px
三个值 padding:10px 20px 30px; 上设置为10px,
	   左右设置为20px,下设置为30px
四个值 padding:10px 20px 30px 40px;	按顺序上下左右设置 

记忆规则：从上开始赋值，然后顺时针赋值，
	      如果设置赋值的，看对面的！！

不会撑大盒子的特殊情况
-------------------
不会撑大盒子的特殊情况（块级元素）
1. 如果子盒子没有设置宽度，
此时宽度默认是父盒子的宽度
2. 此时给子盒子设置左右的padding或者左右的border，
此时不会撑大子盒子

给盒子设置border或padding时，盒子会被撑大，如果不想盒子被撑大？
-------------------
解决方法 ① ：手动内减
• 操作：自己计算多余大小，手动在内容中减去
• 缺点：项目中计算量太大，很麻烦

解决方法 ② ：自动内减
• 操作：给盒子设置属性 box-sizing : border-box ; 即可
• 优点：浏览器会自动计算多余大小，自动在内容中减去

外边距（margin）
-------------------
属性名：margin
属性值：数字 + px
记忆规则：从上开始赋值，然后顺时针赋值，
如果设置赋值的，看对面的！！

margin单方向设置的应用
-------------------
水平方向 margin-left 让当前盒子往右移动
水平方向 margin-right 让右边的盒子往右边移动
垂直方向 margin-top 让当前盒子向上移动
垂直方向 margin-bottom 让盒子往下移动

-------------------
浮动
-------------------

结构伪类选择器
-------------------
1. 作用：根据元素在HTML中的结构关系查找元素
2. 优势：减少对于HTML中类的依赖，有利于保持代码整洁
3. 场景：常用于查找某父级选择器中的子元素

E:first-child{} 匹配父元素中的第一个子元素，并且是E元素
E:last-child{} 匹配父元素最后一个子元素，并且是E元素
E:nth-child(n){} 匹配父元素中第n个元素，并且E元素
E:nth-last-child(n){} 匹配父元素中第n个子元素，并且E元素

（了解）nth-of-type结构伪类选择器
-------------------
E:nth-of-type{} 只在父元素的同类型(E)子元素范围中，
匹配第n个

区别
• :nth-child → 直接在所有孩子中数个数
• :nth-of-type → 先通过该 
类型 找到符合的一堆子元素，然后在这一堆子元素中数个数

伪元素
-------------------
::before 在父元素内容的前面添加一个为元素
::after 在父元素内容的最后添加一个为元素

注意点：
1. 必须设置content属性才能生效
2. 伪元素默认是行内元素

标准流
-------------------
标准流：又称文档流，是浏览器在渲染显示
网页内容时默认采用的一套排版规则

常见标准流排版规则：
1. 块级元素：从上往下，垂直布局，独占一行
2. 行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行

浮动
-------------------
早期的作用：图文环绕
现在的作用：网页布局

浮动的代码
-------------------
属性名：float
1. 左浮动：float : left
2. 右浮动：float : right

清除浮动的目的
-------------------
影响：如果子元素浮动了，此时子元素不能撑开标准流的块级父元素
• 子元素浮动后脱标 → 不占位置
• 需要父元素有高度，从而不影响其他网页元素的布局

除浮动的方法
-------------------

① 直接设置父元素高度
-------------------
• 优点：简单粗暴，方便
• 缺点：有些布局中不能固定父元素高度。
如：新闻列表、京东推荐模块

② 额外标签法
-------------------
1. 在父元素内容的最后添加一个块级元素
2. 给添加的块级元素设置 clear:both
• 缺点：会在页面中添加额外的标签，
会让页面的HTML结构变得复杂

③ 单伪元素清除法
-------------------
操作：用伪元素替代了额外标签

① ：基本写法
-------------------
.clearfix::after{
content:'';
display:block;
clear:both;
}

② ：补充写法
-------------------
.clearfix::after{
content:'';
display:block;
clear:both;
/*在网页中看不到为元素*/
height:0;
visibility:hidden;
}

优点：项目中使用，直接给标签加类即可清除浮动

④ 双伪元素清除法
-------------------
.clearfix::before,
.clearfix::after{
  content:'';
  display:table;
}
.clearfix::after{
clear:both;
}

优点：项目中使用，直接给标签加类即可清除浮动

⑤ 给父元素设置overflow : hidden
-------------------
• 优点：方便

网页常见布局方式
-------------------
1. 块级元素独占一行 → 垂直布局
2. 行内元素/行内块元素一行显示多个 → 水平布局

定位的基本介绍
-------------------
1. 标准流
	1. 块级元素独占一行 → 垂直布局
	2. 行内元素/行内块元素一行显示多个 → 水平布局
2. 浮动
	1. 可以让原本垂直布局的 块级元素变成水平布局
3. 定位
	1. 可以让元素自由的摆放在网页的任意位置
	2. 一般用于 盒子之间的层叠情况
	
-------------------	
使用定位的步骤
-------------------

1. 设置定位方式
-------------------
属性名：position
常见属性值：
	静态定位 static
	相对定位 relative
	绝对定位 absolute
	固定定位 fixed
	
2. 设置偏移值
-------------------
偏移值设置分为两个方向，水平和垂直方向各选一个使用即可
选取的原则一般是就近原则 （离哪边近用哪个）

静态定位
-------------------
介绍：静态定位是默认值，就是之前认识的标准流。
代码：position:static;
注意点：
1. 静态定位就是之前标准流，不能通过方位属性进行移动
2. 之后说的定位不包括静态定位，一般特指后几种：相对、绝对、固定

静态定位能通过方位属性进行移动吗
-------------------
不能，静态定位的元素就是默认标准流的情况

相对定位
-------------------
介绍：自恋型定位，相对于自己之前的位置进行移动
代码:position:relative;
特点：
1. 需要配合方位属性实现移动
2. 相对于自己原来位置进行移动
3. 在页面中占位置 → 没有脱标

应用场景：
1. 配合绝对定位组CP（子绝父相）
2. 用于小范围的移动

绝对定位
-------------------
介绍：拼爹型定位，相对于非静态定位的父元素进行定位移动
代码：position:absolute;
特点：
1. 需要配合方位属性实现移动
2. 默认相对于浏览器可视区域进行移动
3. 在页面中不占位置 → 已经脱标

应用场景：
1. 配合绝对定位组CP（子绝父相）

绝对定位到底相对于谁进行偏移
-------------------
1. 祖先元素中没有定位 → 默认相对于浏览器进行移动
2. 祖先元素中有定位 → 相对于 最近的 有定位 的祖先元素进行移动


子绝父相
-------------------
场景：让子元素相对于父元素进行自由移动
含义：
	• 子元素：绝对定位
	• 父元素：相对定位
子绝父相好处：
	• 父元素是相对定位，则对网页布局影响最小
场景：在使用子绝父相的时候，发现父元素已经
有绝对定位了，此时直接子绝即可！
原因：
• 父元素已经有定位已经满足要求，
如果盲目修改父元素定位方式，可能会影响之前写好的布局

使用子绝父相水平居中的操作是什么
-------------------
1. 子绝父相
2. left：50%；
3. top：50%；
4. transform：translate（-50%，-50%）；

固定定位
-------------------
介绍：死心眼型定位，相对于浏览器进行定位移动
代码：position:fixed;
特点：
1. 需要配合方位属性实现移动
2. 相对于浏览器可视区域进行移动
3. 在页面中不占位置 → 已经脱标

应用场景：
1. 让盒子固定在屏幕中的某个位置

元素层级问题
-------------------
不同布局方式元素的层级关系：
	• 标准流 < 浮动 < 定位

不同定位之间的层级关系：
	• 相对、绝对、固定默认层级相同
	• 此时HTML中写在下面的元素层级更高，会覆盖上面的元素
	
更改定位元素的层级
-------------------
场景：改变定位元素的层级
属性名：z-index
属性值：数字
• 数字越大，层级越高

-------------------
装饰
-------------------

垂直对齐方式
-------------------
属性名：vertical-align
设置行内/行内块元素垂直对齐方式
basdline 默认基线对齐
top 顶部对齐
middle 中部对齐
bottom 底部对齐

项目中 vertical-align 可以解决的问题
-------------------
1. 文本框和表单按钮无法对齐问题
2. input和img无法对齐问题
3. div中的文本框，文本框无法贴顶问题
4. div不设高度由img标签撑开，此时img标签下面会存在额外间隙问题
5. 使用line-height让img标签垂直居中问题

注意点：
• 学习浮动之后，不推荐使用行内块元素让div一行中显示，
因为可能会出现垂直对齐问题
• 推荐优先使用浮动完成效果

光标类型
-------------------
属性名：cursor
default: 默认值，通常是箭头
pointer：小手效果，提示用户可以点击
text：工字型，提示用户可以选择文字
move：十字光标，提示用户可以移动

边框圆角
-------------------
场景：让盒子四个角变得圆润，增加页面细节，提升用户体验
属性名：border-radius
常见取值：数字+px 、百分比

胶囊按钮
-------------------
1. 盒子要求是长方形
2. 设置 → border-radius：盒子高度的一半

overflow溢出部分显示效果
-------------------
溢出部分：指的是盒子 内容部分 所超出盒子范围的区域
场景：控制内容溢出部分的显示效果，如：显示、隐藏、滚动条……
属性名：overflow
visible 默认值，溢出部分可见
hidden 一处部分隐藏
scroll 无论是否溢出，都显示滚动条
auto 根据是否溢出，自动显示或隐藏滚动条

元素本身隐藏
-------------------
场景：让某元素本身在屏幕中不可见。
如：鼠标:hover之后元素隐藏
常见属性：
1. visibility：hidden
2. display：none

区别：
1. visibility：hidden 隐藏元素本身，并且在网页中 占位置
2. display：none 隐藏元素本身，并且在网页中 不占位置

注意点：
• 开发中经常会通过 display属性完成元素的显示隐藏切换
• display：none；（隐藏）、 display：block；（显示）