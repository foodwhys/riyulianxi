 Maven的作用
----------------
1. 依赖管理
2. 统一项目结构
3. 项目构建

项目结构
----------------
src/main/java: java源代码目录
src/main/resources:  配置文件信息
src/test/java: 测试代码
src/test/resources: 测试配置文件信息


Maven项目的目录结构:
----------------
maven-project01
	|---  src  (源代码目录和测试代码目录)
		    |---  main (源代码目录)
			           |--- java (源代码java文件目录)
​			           |--- resources (源代码配置文件目录)
​		    |---  test (测试代码目录)
​			           |--- java (测试代码java目录)
			           |--- resources (测试代码配置文件目录)
​	|--- target (编译、打包生成文件存放目录)

POM配置详解
----------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- POM模型版本 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 当前项目坐标 -->
    <groupId>com.itheima</groupId>
    <artifactId>maven_project1</artifactId>
    <version>1.0-SNAPSHOT</version>
    
    <!-- 打包方式 -->
    <packaging>jar</packaging>
 
</project>

<project> ：pom文件的根标签，表示当前maven项目
<modelVersion> ：声明项目描述遵循哪一个POM模型版本
  - 虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0
- 坐标 ：<groupId>、<artifactId>、<version>
  - 定位项目在本地仓库中的位置，由以上三个标签组成一个坐标
- <packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）

Maven坐标详解
----------------
- Maven中的坐标是==资源的唯一标识== , 通过该坐标可以唯一定位资源位置
- 使用坐标来定义项目或引入项目中需要的依赖

Maven坐标主要组成
----------------
groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）
artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）
version：定义当前项目版本号 

依赖管理
----------------
1. 在pom.xml中编写<dependencies>标签
2. 在<dependencies>标签中使用<dependency>引入坐标
3. 定义坐标的 groupId、artifactId、version

<dependencies>
    <!-- 第1个依赖 : logback -->
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.11</version>
    </dependency>
    <!-- 第2个依赖 : junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
    </dependency>
</dependencies>

依赖传递
----------------
1. 直接依赖：在当前项目中通过依赖配置建立的依赖关系
2. 间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源

排除依赖
----------------
<!--排除依赖, 主动断开依赖的资源-->
<exclusions>
	<exclusion>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
	</exclusion>
</exclusions>

依赖范围
----------------
在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。

如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。
----------------
1. 主程序范围有效（main文件夹范围内）
2. 测试程序范围有效（test文件夹范围内）
3. 是否参与打包运行（package指令范围内）

compile（默认） 主程序 测试程序 打包（运行）
test   测试程序 
provided 主程序 测试程序 
runtime 测试程序 打包（运行）

生命周期
----------------
clean：清理工作。
default：核心工作。如：编译、测试、打包、安装、部署等。
site：生成报告、发布站点等。

上面有很多的阶段，主要关注以下几个
----------------
 clean：移除上一次构建生成的文件

• compile：编译项目源代码

• test：使用合适的单元测试框架运行测试(junit)

• package：将编译后的文件打包，如：jar、war等

• install：安装项目到本地仓库

生命周期的顺序是：
clean --> validate --> compile --> test --> package --> verify --> install --> site --> deploy 

我们需要关注的就是：clean -->  compile --> test --> package  --> install 