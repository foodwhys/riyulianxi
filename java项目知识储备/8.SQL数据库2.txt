
基本查询
-------------
查询多个字段
select 字段1, 字段2, 字段3 from 表名;
查询所有字段（通配符）
select * from 表名;
设置别名
select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ] from 表名;
去除重复记录
select distinct 字段列表 from 表名;

条件查询
-------------
select 字段列表 from 表名 where 条件列表 ;
 -- 条件列表：意味着可以有多个条件
 
比较运算符 功能
-------------
> 大于
>= 大于等于
< 小于
<= 小于等于
= 等于
<> 或 != 不等于
between ... and ... 在某个范围之内(含最小、最大值)
in(...) 在in之后的列表中的值，多选一
like 占位符 模糊匹配(_匹配单个字符, %匹配任意个字符)
is null 是null 

常用的逻辑运算符如下
-------------
and 或 && 并且 (多个条件同时成立)
or 或 || 或者 (多个条件任意一个成立)
not 或 ! 非 , 不是

案例1：查询 姓名 为 杨逍 的员工
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where name = '杨逍'; -- 字符串使用''或""包含

案例2：查询 id小于等于5 的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where id <=5;

案例3：查询 没有分配职位 的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where job is null ;

案例4：查询 有职位 的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where job is not null ;

案例5：查询 密码不等于 '123456' 的员工信息
-------------
-- 方式1：
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where password <> '123456';
-- 方式2：
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where password != '123456';

案例6：查询 入职日期 在 '2000-01-01' (包含) 到 '2010-01-01'(包含) 之间的员工信息
-------------
-- 方式1：
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where entrydate>='2000-01-01' and entrydate<='2010-01-01';
-- 方式2： between...and
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where entrydate between '2000-01-01' and '2010-01-01';

案例7：查询 入职时间 在 '2000-01-01' (包含) 到 '2010-01-01'(包含) 之间 且 性别为女的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where entrydate between '2000-01-01' and '2010-01-01'
and gender = 2;

案例8：查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息
-------------
-- 方式1：使用or连接多个条件
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where job=2 or job=3 or job=4;
-- 方式2：in关键字
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where job in (2,3,4);

案例9：查询 姓名 为两个字的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where name like '__'; # 通配符 "_" 代表任意1个字符


案例10：查询 姓 '张' 的员工信息
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
where name like '张%'; # 通配符 "%" 代表任意个字符（0个 ~ 多个）

聚合函数
-------------
select 聚合函数(字段列表) from 表名 ;
注意 : 聚合函数会忽略空值，对NULL值不作为统计

count 统计数量
max 最大值
min 最小值
avg 平均值
sum 求和

案例1：统计该企业员工数量
-------------
# count(字段)
select count(id) from tb_emp;-- 结果：29
select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）
# count(常量)
select count(0) from tb_emp;
select count('A') from tb_emp;
# count(*) 推荐此写法（MySQL底层进行了优化）
select count(*) from tb_emp;

案例2：统计该企业最早入职的员工
-------------
select min(entrydate) from tb_emp;

案例3：统计该企业最迟入职的员工
-------------
select max(entrydate) from tb_emp;

案例4：统计该企业员工 ID 的平均值
-------------
select avg(id) from tb_emp;

案例5：统计该企业员工的 ID 之和
-------------
select sum(id) from tb_emp;

分组查询
-------------
1.分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。
2.分组查询通常会使用聚合函数进行计算。

语法
-------------
select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];

案例1：根据性别分组 , 统计男性和女性员工的数量
-------------
select gender, count(*)
from tb_emp
group by gender; -- 按照gender字段进行分组（gender字段下相同的数据归为一
组）

案例2：查询入职时间在 '2015-01-01' (包含) 以前的员工 , 
并对结果根据职位分组 , 获取员工数量大于等于2的职位
-------------
select job, count(*)
from tb_emp
where entrydate <= '2015-01-01' -- 分组前条件
group by job -- 按照job字段分组
having count(*) >= 2; -- 分组后条件

注意事项:
• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义
• 执行顺序：where > 聚合函数 > having

where与having区别（面试题）
-------------
执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。
判断条件不同：where不能对聚合函数进行判断，而having可以。

排序查询
-------------
排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序

语法
-------------
select 字段列表
from 表名
[where 条件列表]
[group by 分组字段 ]
order by 字段1 排序方式1 , 字段2 排序方式2 … ;

排序方式：
ASC ：升序（默认值）
DESC：降序

案例1：根据入职时间, 对员工进行升序排序
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
order by entrydate ASC; -- 按照entrydate字段下的数据进行升序排序

select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
order by entrydate; -- 默认就是ASC（升序）


案例2：根据入职时间，对员工进行降序排序
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序

案例3：根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
order by entrydate ASC , update_time DESC;

-------------
分页查询
-------------

-------------
分页查询语法
select 字段列表 from 表名 limit 起始索引, 查询记录数 ;

案例1：从起始索引0开始查询员工数据, 每页展示5条记录
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
limit 0 , 5; -- 从索引0开始，向后取5条记录

案例2：查询 第1页 员工数据, 每页展示5条记录
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
limit 5; -- 如果查询的是第1页数据，起始索引可以省略，直接简写为：limit 条数

案例3：查询 第2页 员工数据, 每页展示5条记录
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
limit 5 , 5; -- 从索引5开始，向后取5条记录

案例4：查询 第3页 员工数据, 每页展示5条记录
-------------
select id, username, password, name, gender, image, job, entrydate,
create_time, update_time
from tb_emp
limit 10 , 5; -- 从索引10开始，向后取5条记录

注意事项:
1. 起始索引从0开始。 计算公式 ： 起始索引 = （查询页码 - 1）* 每页显示记录数
2. 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT
3. 如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 条数

