Mybatis基础操作
--------------------
1. 准备数据库表
2. 创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）
3. application.properties中引入数据库连接信息
4. 创建对应的实体类 Emp（实体类属性采用驼峰命名）
5. 准备Mapper接口 EmpMapper

application.properties中引入数据库连接信息
--------------------
#驱动类名称
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#数据库连接的url
spring.datasource.url=jdbc:mysql://localhost:3306/mybatis
#连接数据库的用户名
spring.datasource.username=root
#连接数据库的密码
spring.datasource.password=1234

准备Mapper接口：EmpMapper
--------------------
/*@Mapper注解：表示当前接口为mybatis中的Mapper接口
程序运行时会自动创建接口的实现类对象(代理对象)，并交给Spring的IOC容器管理
*/

删除
--------------------
功能：根据主键删除数据
-- 删除id=17的数据
delete from emp where id = 17;


接口方法
--------------------
@Mapper
public interface EmpMapper {
//@Delete("delete from emp where id = 17")
//public void delete();
//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据
//SQL语句中的id值不能写成固定数值，需要变为动态的数值
//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句

/**
* 根据id删除数据
* @param id 用户id
*/
@Delete("delete from emp where id = #{id}")//使用#{key}方式获取方法中的参数值
public void delete(Integer id);
}

@Delete注解：用于编写delete操作的SQL语句
如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，
如：#{id}、#{value}。但是建议保持名字一致。

测试
--------------------
在单元测试类中通过@Autowired注解注入EmpMapper类型对象
@SpringBootTest
class SpringbootMybatisCrudApplicationTests {
	@Autowired //从Spring的IOC容器中，获取类型是EmpMapper的对象并注入
	private EmpMapper empMapper;
	@Test
	public void testDel(){
		//调用删除方法
		empMapper.delete(16);
	 }
}

日志输入
--------------------
在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作
1. 打开application.properties文件
2. 开启mybatis的日志，并指定输出到控制台
#指定mybatis输出日志的位置, 输出控制台
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：

但是我们发现输出的SQL语句：delete from emp where id = ?，我们输入的参数16并没
有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。


参数占位符
--------------------
在Mybatis中提供的参数占位符有两种：${...} 、#{...}
#{...}
	执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值
	使用时机：参数传递，都使用#{…}
${...}
	拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题
	使用时机：如果对表名、列表进行动态设置时使用
	
新增
--------------------
@Mapper
public interface EmpMapper {
	@Insert("insert 
			into emp( 
				username
				, name
				, gender
				, image
				, job
				, entrydate
				, dept_id
				, create_time
				, update_time
			) 
			values ( 
				# { username }
				, # { name }
				, # { gender }
				, # { image }
				, # { job }
				, # { entrydate }
				, # { deptId }
				, # { createTime }
				, # { updateTime }
			)")
	public void insert(Emp emp);
}

主键返回
--------------------
概念：在数据添加成功后，需要获取插入数据库数据的主键。
默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，
需要在Mapper接口中的方法上添加一个Options注解，
并在注解中指定属性useGeneratedKeys=true和keyProperty="实体类属性名

主键返回代码实现：
--------------------
@Mapper
public interface EmpMapper {
//会自动将生成的主键值，赋值给emp对象的id属性
@Options(useGeneratedKeys = true,keyProperty = "id")
@Insert("SQL...")
public void insert(Emp emp);
}

更新
--------------------
@Mapper
public interface EmpMapper {
/**
* 根据id修改员工信息
* @param emp
*/
@Update("update emp 
		set
			username = # { username }
			, name = # { name }
			, gender = # { gender }
			, image = # { image }
			, job = # { job }
			, entrydate = # { entrydate }
			, dept_id = # { deptId }
			, update_time = # { updateTime } 
		where
			id = # { id }")
public void update(Emp emp);
}

查询
--------------------
@Mapper
public interface EmpMapper {
@Select("select
    id
    , username
    , password
    , name
    , gender
    , image
    , job
    , entrydate
    , dept_id
    , create_time
    , update_time 
from
    emp 
where
    id = # { id }
public Emp getById(Integer id);
}

数据封装
--------------------

实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。
如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。
解决方案：
1. 起别名
2. 结果映射
3. 开启驼峰命名

手动结果映射
--------------------
@Results({@Result(column = "dept_id", property = "deptId"),
			@Result(column = "create_time", property = "createTime"),
			@Result(column = "update_time", property = "updateTime")}
			)
@Select("select id, username, password, name, gender, image, job,
entrydate, dept_id, create_time, update_time from emp where id=#{id}")
public Emp getById(Integer id);


开启驼峰命名(推荐)
--------------------
如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射
驼峰命名规则： abc_xyz => abcXyz
表中字段名：abc_xyz
类中属性名：abcXyz

# 在application.properties中添加：
mybatis.configuration.map-underscore-to-camel-case=true
要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。

条件查询
--------------------
接口方法：
 方式一
@Mapper
public interface EmpMapper {
	@Select("select * from emp " +
	"where name like '%${name}%' " +
	"and gender = #{gender} " +
	"and entrydate between #{begin} and #{end} " +
	"order by update_time desc")
	public List<Emp> list(String name, Short gender, LocalDate begin,LocalDate end);
}
以上方式注意事项：
1. 方法中的形参名和SQL语句中的参数占位符名保持一致
2. 模糊查询使用${...}进行字符串拼接，这种方式呢，由于是字符串拼接，并不是预编译的
形式，所以效率不高、且存在sql注入风险。


方式二（解决SQL注入风险）
使用MySQL提供的字符串拼接函数：concat('%' , '关键字' , '%')
@Mapper
public interface EmpMapper {
	@Select("select * from emp " +
	"where name like concat('%',#{name},'%') " +
	"and gender = #{gender} " +
	"and entrydate between #{begin} and #{end} " +
	"order by update_time desc")
	public List<Emp> list(String name, Short gender, LocalDatebegin, LocalDate end);
}

执行结果：生成的SQL都是预编译的SQL语句（性能高、安全）


参数名说明
--------------------
参数名在不同的SpringBoot版本中，处理方案还不同：
在springBoot的2.x版本（保证参数名一致）
在springBoot的1.x版本/单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）

Mybatis的XML配置文件
--------------------
Mybatis的开发有两种方式：
1. 注解
2. XML

在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：
--------------------
1. XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）
2. XML映射文件的namespace属性为Mapper接口全限定名一致
3. XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。

<select>标签：就是用于编写select查询语句的
resultType属性，指的是查询返回的单条记录所封装的类型。

XML配置文件实现
--------------------
第1步：创建XML映射文件
第2步：编写XML映射文件
配置：XML映射文件的namespace属性为Mapper接口全限定名
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.mapper.EmpMapper">
	<!--查询操作-->
	<select id="list" resultType="com.itheima.pojo.Emp">
	 select * from emp
	 where name like concat('%',#{name},'%')
	 and gender = #{gender}
	 and entrydate between #{begin} and #{end}
	 order by update_time desc
	</select>
</mapper>

MybatisX的使用
--------------------
MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。

Mybatis动态SQL
--------------------
<if> ：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。

<if test="条件表达式">
要拼接的sql语句
</if>

接下来，我们就通过 <if> 标签来改造之前条件查询的案例。

条件查询
--------------------
<if>
	用于判断条件是否成立，如果条件为true，则拼接SQL
	形式：
<where>
	where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的
	AND或OR
<set>
	动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）
	
动态SQL-foreach
--------------------
<foreach collection="ids" item="id" separator="," open="("close=")">
 #{id}
</foreach>

动态SQL-sql&include
--------------------
<sql> ：定义可重用的SQL片段
<include> ：通过属性refid，指定包含的SQL片段

<sql id="commonSelect">
 select id, username, password, name, gender, image, job,
entrydate, dept_id, create_time, update_time from emp
</sql>

<include refid="commonSelect"/>
