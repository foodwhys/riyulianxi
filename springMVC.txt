SpringMVC是基于Spring的，在pom.xml只导入了spring-webmvc jar包的原因是它会自动依赖spring相关坐标

AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化Web3.0容器的抽象类

AbstractDispatcherServletInitializer提供了三个接口方法供用户实现
	createServletApplicationContext方法，创建Servlet容器时，加载SpringMVC对应
	的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用
	范围为ServletContext范围，即整个web容器范围

	getServletMappings方法，设定SpringMVC对应的请求映射路径，即SpringMVC拦截哪些请求
	
	createRootApplicationContext方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean,使用当前方法进行，使用方式和createServletApplicationContext相同
	
	createServletApplicationContext用来加载SpringMVC环境
	
	createRootApplicationContext用来加载Spring环境
	
@Controller
-------------
SpringMVC控制器类定义上方
设定SpringMVC的核心控制器bean

@RequestMapping
-------------
SpringMVC控制器类或方法定义上方
设置当前控制器方法请求访问路径

@ResponseBody
-------------
类注解或方法注解
SpringMVC控制器类或方法定义上方

设置bean加载控制
-------------
方式一:修改Spring配置类，设定扫描范围为精准范围。

@Configuration 
@ComponentScan({"com.itheima.service","comitheima.dao"}) 
public class SpringConfig {  }

说明:
上述只是通过例子说明可以精确指定让Spring扫描对应的包结构，真正在做开发的时候，因为Dao最
终是交给MapperScannerConfigurer对象来进行扫描处理的，我们只需要将其扫描到service包即
可

方式二:修改Spring配置类，设定扫描范围为com.itheima,排除掉controller包中的bean
@Configuration
@ComponentScan(value="com.itheima",
	excludeFilters=@ComponentScan.Filter(
	type = FilterType.ANNOTATION,
	classes = Controller.class
	 )
)
public class SpringConfig {
}

excludeFilters属性：设置扫描加载bean时，排除的过滤规则
type属性：设置排除规则，当前使用按照bean定义时的注解类型进行排除

ANNOTATION：按照注解排除
ASSIGNABLE_TYPE:按照指定的类型过滤
ASPECTJ:按照Aspectj表达式排除，基本上不会用
REGEX:按照正则表达式排除
CUSTOM:按照自定义规则排除

大家只需要知道第一种ANNOTATION即可
classes属性：设置排除的具体注解类，当前设置排除@Controller定义的bean

@ComponentScan
-------------
类定义上方
设置spring配置类扫描路径，用于加载使用注解格式定义的bean
excludeFilters:排除扫描路径中加载的bean,需要指定类别(type)和具体项(classes)
includeFilters:加载指定的bean，需要指定类别(type)和具体项(classes)

POST请求中文乱码
-------------
protected Filter[] getServletFilters() { 
		CharacterEncodingFilter filter = new CharacterEncodingFilter(); 
		filter.setEncoding("UTF-8"); 
		return new Filter[]{filter}; 
	} 
}

五种类型参数传递
-------------
普通参数
POJO类型参数
嵌套POJO类型参数
数组类型参数
集合类型参数

注意:写上@RequestParam注解框架就不需要自己去解析注入，能提升框架处理性能
@RequestPaam("name")

@RequestParam
-------------
SpringMVC控制器方法形参定义前面
绑定请求参数与处理器方法形参间的关系
required：是否为必传参数
defaultValue：参数默认值

//开启json数据类型自动转换 
@EnableWebMvc
-------------
SpringMVC配置类定义上方
开启SpringMVC多项辅助功能

@RequestBody
SpringMVC控制器方法形参定义前面
将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次

@RequestBody与@RequestParam区别
-------------
@RequestParam用于接收url地址传参，表单传参【application/x-www-formurlencoded】

@RequestBody用于接收json数据【application/json】

后期开发中，发送json格式数据为主，@RequestBody应用较广
如果发送非json格式数据，选用@RequestParam接收请求参数

@DateTimeFormat(pattern="yyyy-MM-dd") Date date1, 
@DateTimeFormat(pattern="yyyy/MM/dd HH:mm:ss") Date

@DateTimeFormat
-------------
SpringMVC控制器方法形参前面
设定日期时间型数据格式

返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的json数据，需要依赖
@ResponseBody注解和@EnableWebMvc注解

@ResponseBody
-------------
方法\类注解
SpringMVC控制器方法定义上方和控制类上
设置当前控制器返回值作为响应体,
写在类上，该类的所有方法都有该注解功能

对象转Json数据(POJO -> json)
集合转Json数据(Collection -> json)

Rest风格
-------------
REST（Representational State Transfer），表现形式状态转换,它是一种软件架构风格
当我们想表示一个网络资源的时候，可以使用两种方式:

传统风格资源描述形式
	http://localhost/user/getById?id=1 查询id为1的用户信息
	http://localhost/user/saveUser 保存用户信息
REST风格描述形式
	http://localhost/user/1 
	http://localhost/user

按照REST风格访问资源时使用行为动作区分对资源进行了何种操作
http://localhost/users 查询全部用户信息 GET（查询）
http://localhost/users/1 查询指定用户信息 GET（查询）
http://localhost/users 添加用户信息 POST（新增/保存）
http://localhost/users 修改用户信息 PUT（修改/更新）
http://localhost/users/1 删除用户信息 DELETE（删除）

传递路径参数
前端发送请求的时候使用: http://localhost/users/1 ,路径中的1就是我们想要传递的参数。

后端获取参数，需要做如下修改:

	修改@RequestMapping的value属性，将其中修改为/users/{id}，目的是和路径匹配
	在方法的形参前添加@PathVariable注解
	
@Controller 
public class UserController { 
		//设置当前请求方法为DELETE，表示REST风格中的删除操作 
		@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE) 
		@ResponseBody public String delete(@PathVariable Integer id) { 
		System.out.println("user delete..." + id); 
		return "{'module':'user delete'}"; 
	}
}

小结
-------------
RESTful入门案例，我们需要学习的内容如下:
(1)设定Http请求动作(动词)
@RequestMapping(value="",method = RequestMethod.POST|GET|PUT|DELETE)
(2)设定请求参数(路径变量)
@RequestMapping(value="/users/{id}",method = RequestMethod.DELETE)
@ReponseBody
public String delete(@PathVariable Integer id){
}

@PathVariable
-------------
SpringMVC控制器方法形参定义前面
绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应

关于接收参数，我们学过三个注解
@RequestBody、@RequestParam、@PathVariable ,这三个注解
之间的区别和应用分别是什么

区别
	@RequestParam用于接收url地址传参或表单传参
	@RequestBody用于接收json数据
	@PathVariable用于接收路径参数，使用{参数名称}描述路径参数
应用
	后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广
	如果发送非json格式数据，选用@RequestParam接收请求参数
	采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值
	
问题1：每个方法的@RequestMapping注解中都定义了访问路径/books，重复性太高。
问题2：每个方法的@RequestMapping注解中都要使用method属性定义请求方式，重复性太高。
问题3：每个方法响应json都需要加上@ResponseBody注解，重复性太高

@RestController 
//@Controller + ReponseBody 
@RequestMapping("/books")

//@RequestMapping(method = RequestMethod.POST)
@PostMapping

//@RequestMapping(value = "/{id}",method = RequestMethod.DELETE) 
@DeleteMapping("/{id}")

//@RequestMapping(method = RequestMethod.PUT)
@PutMapping

//@RequestMapping(value = "/{id}",method = RequestMethod.GET) 
@GetMapping("/{id}")

@RestController
-------------
基于SpringMVC的RESTful开发控制器类定义上方

设置当前控制器类为RESTful风格，
等同于@Controller与@ResponseBody两个注解组合功能

@GetMapping @PostMapping @PutMapping @DeleteMapping
-------------
基于SpringMVC的RESTful开发控制器方法定义上方

设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，
例如@GetMapping对应GET请求

